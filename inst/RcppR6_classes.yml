Lorenz:
  name_cpp: "plant::ode::test::Lorenz"
  constructor:
    args: [sigma: double, R: double, b: double]
  active:
    ode_size: {type: size_t, access: member}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state", name_cpp_set: "plant::ode::r_set_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
    pars: {type: "std::vector<double>", access: member}

OdeR:
  name_cpp: "plant::ode::test::OdeR"
  forward_declare: true
  constructor:
    args: [derivs: "Rcpp::Function", state: "Rcpp::Function", time: double]
  methods:
    update_state: {return_type: void}

OdeRunner:
  name_cpp: "plant::ode::Runner<T>"
  templates:
    parameters: T
    concrete:
      - ["Lorenz": "plant::ode::test::Lorenz"]
      - ["OdeR":   "plant::ode::test::OdeR"]
      - ["FF16": "plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment>"]
      - ["FF16r": "plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment>"]
      - ["K93": "plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment>"]
  constructor:
    args: [obj: T, control: "plant::ode::OdeControl=OdeControl()"]
  active:
    time: {type: double, access: member}
    state: {type: "plant::ode::state_type", access: member}
    times: {type: "std::vector<double>", access: member}
    object: {type: T, access: member}
  methods:
    advance: {return_type: void, args: [time: double]}
    advance_fixed: {return_type: void, args: [time: "std::vector<double>"]}
    step: {return_type: void}
    step_to: {return_type: void, args: [time: double]}
    set_state: {return_type: void, args: [y: "plant::ode::state_type", time: double]}
    set_state_from_system: {return_type: void}

CohortScheduleEvent:
  name_cpp: "plant::CohortScheduleEvent"
  constructor:
    args: [introduction: double, species_index: "plant::util::index"]
  active:
    species_index: {type: "plant::util::index", access: field, name_cpp: species_index}
    times: {type: "std::vector<double>", access: field, readonly: true}
    time_introduction: {type: double, access: member}
    time_end: {type: double, access: member}
    species_index_raw: {type: "size_t", access: member, name_cpp: species_index_raw}

CohortSchedule:
  name_cpp: "plant::CohortSchedule"
  constructor:
    roxygen: |
      Schedule of cohort introduction times
      @param n_species number of species
      @export
    args: [n_species: size_t]
  active:
    size: {type: size_t, access: member}
    n_species: {type: size_t, access: member, name_cpp: get_n_species}
    next_event: {type: "plant::CohortScheduleEvent", access: member}
    remaining: {type: size_t, access: member}
    max_time: {type: double, access: member, name_cpp: get_max_time, name_cpp_set: r_set_max_time}
    ode_times: {type: "std::vector<double>", access: member, name_cpp: r_ode_times, name_cpp_set: r_set_ode_times}
    use_ode_times: {type: bool, access: member, name_cpp: using_ode_times, name_cpp_set: r_set_use_ode_times}
    all_times: {type: SEXP, access: member, name_cpp: r_all_times, name_cpp_set: r_set_all_times}
  methods:
    expand:
      return_type: "plant::CohortSchedule"
      args: [n_extra: size_t, times: "std::vector<double>"]
    clear_times:
      return_type: void
      args: [species_index: "plant::util::index"]
    clear_ode_times:
      return_type: void
      name_cpp: r_clear_ode_times
    set_times:
      return_type: void
      name_cpp: r_set_times
      args: [times: "std::vector<double>", species_index: "plant::util::index"]
    times:
      return_type: "std::vector<double>"
      name_cpp: r_times
      args: [species_index: "plant::util::index"]
    reset:
      return_type: void
    pop:
      return_type: void
    copy:
      return_type: "plant::CohortSchedule"
      name_cpp: r_copy

Disturbance:
  name_cpp: "plant::Disturbance"
  constructor:
    roxygen: |
      Disturbance control object
      @param mean_interval Mean disturbance interval in years
      @export
    args: [mean_interval: double]
  methods:
    density:
      args: [time: "std::vector<double>"]
      return_type: "std::vector<double>"
      name_cpp: r_density
    pr_survival:
      args: [time: double]
      return_type: double
    pr_survival_conditional:
      args: [time: double, time_start: double]
      return_type: double
    cdf:
      args: [time: double]
      return_type: double
  active:
    mean_interval: {type: double, access: member, name_cpp: r_mean_interval}

Control:
  name_cpp: "plant::Control"
  roxygen: |
    Control parameters that tune various aspects of the numerical solvers.
    @title Control parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - plant_assimilation_adaptive: bool
    - plant_assimilation_over_distribution: bool
    - plant_assimilation_tol: double
    - plant_assimilation_iterations: size_t
    - plant_assimilation_rule: size_t
    - plant_seed_tol: double
    - plant_seed_iterations: int
    - cohort_gradient_eps: double
    - cohort_gradient_direction: int
    - cohort_gradient_richardson: bool
    - cohort_gradient_richardson_depth: size_t
    - environment_light_tol: double
    - environment_light_nbase: size_t
    - environment_light_max_depth: size_t
    - environment_rescale_usually: bool
    - ode_step_size_initial: double
    - ode_step_size_min: double
    - ode_step_size_max: double
    - ode_tol_rel: double
    - ode_tol_abs: double
    - ode_a_y: double
    - ode_a_dydt: double
    - schedule_nsteps: size_t
    - schedule_eps: double
    - schedule_verbose: bool
    - schedule_patch_survival: double
    - equilibrium_nsteps: size_t
    - equilibrium_eps: double
    - equilibrium_large_seed_rain_change: double
    - equilibrium_verbose: bool
    - equilibrium_solver_name: "std::string"
    - equilibrium_extinct_seed_rain: double
    - equilibrium_nattempts: int
    - equilibrium_solver_logN: bool
    - equilibrium_solver_try_keep: bool

OdeControl:
  name_cpp: "plant::ode::OdeControl"
  roxygen: |
    Control parameters for the ode system
    @title ODE Control parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - tol_abs: double
    - tol_rel: double
    - a_y: double
    - a_dydt: double
    - step_size_min: double
    - step_size_max: double
    - step_size_initial: double

QK:
  name_cpp: "plant::quadrature::QK"
  constructor:
    roxygen: |
      Gauss-Kronrod Quadrature
      @param rule Degree of the rule; valid sizes are 15, 21, 31, 41, 51, 61.
    args: [rule: size_t]
  methods:
    integrate:
      name_cpp: r_integrate
      args: [f: SEXP, a: double, b: double]
      return_type: double
    integrate_vector_x:
      args: [a: double, b: double]
      return_type: "std::vector<double>"
    integrate_vector:
      args: [y: "std::vector<double>", a: double, b: double]
      return_type: double
  active:
    last_area: {type: double, access: member, name_cpp: get_last_area}
    last_error: {type: double, access: member, name_cpp: get_last_error}
    last_area_abs: {type: double, access: member, name_cpp: get_last_area_abs}
    last_area_asc: {type: double, access: member, name_cpp: get_last_area_asc}

QAG:
  name_cpp: "plant::quadrature::QAG"
  constructor:
    args: [rule: size_t, max_iterations: size_t, atol: double, rtol: double]
  methods:
    integrate:
      return_type: double
      name_cpp: r_integrate
      args: [f: SEXP, a: double, b: double]
    integrate_with_intervals:
      return_type: double
      name_cpp: r_integrate_with_intervals
      args: [f: SEXP, intervals: SEXP]
    integrate_with_last_intervals:
      return_type: double
      name_cpp: r_integrate_with_last_intervals
      args: [f: SEXP, a: double, b: double]
  active:
    last_area: {type: double, access: member, name_cpp: get_last_area}
    last_error: {type: double, access: member, name_cpp: get_last_error}
    last_iterations: {type: size_t, access: member, name_cpp: get_last_iterations}
    last_intervals: {type: "plant::quadrature::intervals_type", access: member, name_cpp: get_last_intervals}
    is_adaptive: {type: bool, access: member}


Interpolator:
  name_cpp: "plant::interpolator::Interpolator"
  constructor:
    roxygen: |
      Spline interpolation
      @export
  methods:
    init:
      return_type: void
      args: [x: "const std::vector<double>&", y: "const std::vector<double>&"]
    eval:
      return_type: "std::vector<double>"
      args: [x: "std::vector<double>"]
      name_cpp: r_eval
  active:
    x: {type: "std::vector<double>", access: member, name_cpp: get_x}
    y: {type: "std::vector<double>", access: member, name_cpp: get_y}
    xy: {type: SEXP, access: member, name_cpp: r_get_xy}
    size: {type: size_t, access: member}
    min: {type: double, access: member}
    max: {type: double, access: member}

Individual:
  name_cpp: "plant::Individual<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [s: T]
    name_cpp: "plant::make_individual<T,E>"
    roxygen: |
      Individual object
      @param T String containing class of plant strategy to create;
      @param E String containing class of environmnet to create;
      @export
  active:
    strategy: {type: "T", access: member, name_cpp: r_get_strategy}
    internals: {type: "plant::Internals", access: member, name_cpp: "r_internals"}
    aux_size: {type: size_t, access: member}
    ode_size: {type: size_t, access: member}
    ode_names: {type: "std::vector<std::string>", access: member}
    aux_names: {type: "std::vector<std::string>", access: member}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state", name_cpp_set: "plant::ode::r_set_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
    mortality_probability: {type: double, access: member}
    strategy_name: {type: "std::string", access: member}
  methods:
    state:
      args: [name: "std::string"]
      return_type: double
    rate:
      args: [name: "std::string"]
      return_type: double
    aux:
      args: [name: "std::string"]
      return_type: double
    set_state:
      args: [name: "std::string", v: double]
      return_type: void
    compute_competition:
      args: [h: double]
      return_type: double
    compute_rates:
      args: [environment: E]
      return_type: void
    establishment_probability:
      args: [environment: E]
      return_type: double
    net_mass_production_dt:
      args: [environment: E]
      return_type: double
    reset_mortality:
      return_type: void
    lcp_whole_plant:
      args: []
      return_type: double

IndividualRunner:
  name_cpp: "plant::tools::IndividualRunner<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    name_cpp: "plant::tools::IndividualRunner<T,E>"
    args: [plant: "plant::Individual<T,E>", environment: E]
  active:
    plant: {access: field, type: "plant::Individual<T,E>"}

Internals:
  name_cpp: "plant::Internals"
  constructor:
    args: [s_size: size_t, a_size: size_t]
    roxygen: |
      Internals class holding vectors of states, thier associated rates and auxiliary (aux) state 
      which is calculated from the state through running compute_rates
      @title Extract Internals from plant object
      @param s_size ???
      @param a_size ???
      @export
  active:
    state_size: {type: size_t, access: field}
    aux_size: {type: size_t, access: field}
    states: {type: "std::vector<double>", access: field}
    rates: {type: "std::vector<double>", access: field}
    auxs: {type: "std::vector<double>", access: field}
  methods:
    state:
      args: [i: int]
      return_type: double
    rate:
      args: [i: int]
      return_type: double
    aux:
      args: [i: int]
      return_type: double
    set_aux:
      args: [i: int, v: double]
      return_type: void
    set_state:
      args: [i: int, v: double]
      return_type: void
    set_rate:
      args: [i: int, v: double]
      return_type: void
    resize:
      args: [new_size: size_t, new_aux_size: size_t]
      return_type: void


Parameters:
  name_cpp: "plant::Parameters<T,E>"
  templates:
    parameters: [T, E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  validator:
    name_cpp: validate
  list:
    - patch_area: double
    - n_patches: size_t
    - disturbance_mean_interval: double
    - strategies: "std::vector<T>"
    - seed_rain: "std::vector<double>"
    - is_resident: "std::vector<bool>"
    - control: "plant::Control"
    - strategy_default: "T"
    - cohort_schedule_max_time: double
    - cohort_schedule_times_default: "std::vector<double>"
    - cohort_schedule_times: "std::vector<std::vector<double> >"
    - cohort_schedule_ode_times: "std::vector<double>"

Cohort:
  name_cpp: "plant::Cohort<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    name_cpp: "plant::make_cohort<T,E>"
    args: [strategy: T]
  active:
    plant: {type: "plant::Individual<T,E>", access: field, readonly: true}
    height: {type: double, access: member}
    log_density: {type: double, access: member, name_cpp: get_log_density}
    competition_effect: {type: double, access: member}
    fecundity: {type: double, access: member}
    ode_size: {type: size_t, access: member}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state", name_cpp_set: "plant::ode::r_set_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
    ode_names: {type: "std::vector<std::string>", access: member}
  methods:
    compute_competition:
      return_type: double
      args: [height: double]
    growth_rate_gradient:
      return_type: double
      name_cpp: "r_growth_rate_gradient"
      args: [environment: E]
    compute_rates:
      return_type: void
      args: [environment: E]
    compute_initial_conditions:
      return_type: void
      args: [environment: E]

# For now, also not templated
Species:
  name_cpp: "plant::Species<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [strategy: T]
  active:
    size: {type: size_t, access: member}
    seed: {type: "plant::Cohort<T,E>", access: member, name_cpp: r_seed}
    height_max: {type: double, access: member, readonly: true}
    heights: {type: "std::vector<double>", access: member, name_cpp: r_heights, name_cpp_set: r_set_heights}
    log_densities: {type: "std::vector<double>", access: member, name_cpp: r_log_densities}
    cohorts: {type: "std::vector<plant::Cohort<T,E> >", access: member, name_cpp: r_cohorts}
    seeds: {type: "std::vector<double>", access: member}
    competition_effects: {type: "std::vector<double>", access: member, name_cpp: r_competition_effects}
    ## ODE interface:
    ode_size: {type: size_t, access: member}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state", name_cpp_set: "plant::ode::r_set_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
  methods:
    clear:
      return_type: void
    compute_rates:
      return_type: void
      args: [environment: E]
    compute_competition:
      return_type: double
      args: [height: double]
    add_seed:
      return_type: void
    cohort_at:
      return_type: "plant::Cohort<T,E>"
      args: [index: "plant::util::index"]
      name_cpp: r_cohort_at
    competition_effects_error:
      return_type: "std::vector<double>"
      args: [scal: double=1]
      name_cpp: r_competition_effects_error

Patch:
  name_cpp: "plant::Patch<T,E>"
  templates:
    parameters: [T, E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [parameters: "plant::Parameters<T,E>"]
  active:
    time: {type: double, access: member}
    size: {type: size_t, access: member}
    height_max: {type: double, access: member}
    parameters: {type: "plant::Parameters<T,E>", access: member, name_cpp: r_parameters}
    environment: {type: E, access: member, name_cpp: r_environment}
    species: {type: "std::vector<plant::Species<T,E> >", access: member, name_cpp: r_species}
    ## ODE interface:
    ode_size: {type: size_t, access: member}
    ode_time: {type: double, access: function, name_cpp: "plant::ode::r_ode_time"}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
  methods:
    compute_competition: {return_type: double, args: [height: double]}
    add_seed:
      return_type: void
      args: [species_index: "plant::util::index"]
      name_cpp: r_add_seed
    compute_environment:
      return_type: void
      name_cpp: r_compute_environment
    compute_rates:
      return_type: void
      name_cpp: r_compute_rates
    # TODO: Not 100% sure this is needed from R:
    reset:
      return_type: void
    # Because we now care about time, we need to make sure that the
    # setter function passes time along, so can't be done via the
    # active binding (unlike Species, Cohort, etc).
    set_ode_state:
      return_type: void
      access: function
      name_cpp: "plant::ode::r_set_ode_state"
      args: [values: "plant::ode::state_type", time: double]
    derivs:
      return_type: "plant::ode::state_type"
      access: function
      name_cpp: "plant::ode::r_derivs"
      args: [y: "const plant::ode::state_type&", time: double]
    set_state:
      args: [time: double, state: "const std::vector<double>&", n: "const std::vector<size_t>&", env: "const std::vector<double>&"]
      name_cpp: r_set_state
      return_type: void

SCM:
  name_cpp: "plant::SCM<T,E>"
  templates:
    parameters: [T, E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [parameters: "plant::Parameters<T,E>"]
  methods:
    run:
      return_type: void
    run_next:
      return_type: "std::vector<plant::util::index>"
      name_cpp: r_run_next
    reset:
      return_type: void
    seed_rain:
      args: [species_index: "plant::util::index"]
      return_type: double
      name_cpp: r_seed_rain
    seed_rain_cohort:
      args: [species_index: "plant::util::index"]
      return_type: "std::vector<double>"
      name_cpp: r_seed_rain_cohort
    competition_effect_error:
      args: [species_index: "plant::util::index"]
      return_type: "std::vector<double>"
      name_cpp: r_competition_effect_error
    set_cohort_schedule_times:
      args: [times: "std::vector<std::vector<double> >"]
      return_type: void
      name_cpp: r_set_cohort_schedule_times
    # times
    # set_times
  active:
    complete: {type: bool, access: member}
    time: {type: double, access: member}
    seed_rains: {type: "std::vector<double>", access: member}
    parameters: {type: "plant::Parameters<T,E>", access: member, name_cpp: r_parameters}
    patch:
      type: "plant::Patch<T,E>"
      access: member
      name_cpp: r_patch
    cohort_schedule:
      type: "plant::CohortSchedule"
      access: member
      name_cpp: r_cohort_schedule
      name_cpp_set: r_set_cohort_schedule
    ode_times:
      type: "std::vector<double>"
      access: member
      name_cpp: r_ode_times
    state:
      type: "Rcpp::List"
      access: function
      name_cpp: "plant::get_state"
    use_ode_times:
      type: bool
      access: member
      name_cpp: r_use_ode_times
      name_cpp_set: r_set_use_ode_times
    seed_rain_error:
      type: "std::vector<std::vector<double> >"
      access: member
      name_cpp: r_seed_rain_error

StochasticSpecies:
  name_cpp: "plant::StochasticSpecies<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [strategy: "T"]
  active:
    size: {type: size_t, access: member}
    size_plants: {type: size_t, access: member}
    seed: {type: "plant::Individual<T,E>", access: member, name_cpp: r_seed}
    height_max: {type: double, access: member, readonly: true}
    heights: {type: "std::vector<double>", access: member, name_cpp: r_heights, name_cpp_set: r_set_heights}
    plants: {type: "std::vector<plant::Individual<T,E> >", access: member, name_cpp: r_plants}
    is_alive: {type: "std::vector<bool>", access: member, name_cpp: r_is_alive}
    seeds: {type: "std::vector<double>", access: member}
    ## ODE interface:
    ode_size: {type: size_t, access: member}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state", name_cpp_set: "plant::ode::r_set_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
  methods:
    clear:
      return_type: void
    compute_rates:
      return_type: void
      args: [environment: E]
    compute_competition:
      return_type: double
      args: [height: double]
    add_seed:
      return_type: void
    plant_at:
      return_type: "plant::Individual<T,E>"
      args: [index: "plant::util::index"]
      name_cpp: r_plant_at
    deaths:
      return_type: size_t
    establishment_probability:
      args: [environment: E]
      return_type: double

StochasticPatch:
  name_cpp: "plant::StochasticPatch<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [parameters: "plant::Parameters<T,E>"]
  active:
    time: {type: double, access: member}
    size: {type: size_t, access: member}
    height_max: {type: double, access: member}
    parameters: {type: "plant::Parameters<T,E>", access: member, name_cpp: r_parameters}
    environment: {type: E, access: member, name_cpp: r_environment}
    species: {type: "std::vector<plant::StochasticSpecies<T,E> >", access: member, name_cpp: r_species}
    ## ODE interface:
    ode_size: {type: size_t, access: member}
    ode_time: {type: double, access: function, name_cpp: "plant::ode::r_ode_time"}
    ode_state: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_state"}
    ode_rates: {type: "plant::ode::state_type", access: function, name_cpp: "plant::ode::r_ode_rates"}
  methods:
    compute_competition: {return_type: double, args: [height: double]}
    add_seed:
      return_type: bool
      args: [species_index: "plant::util::index"]
      name_cpp: r_add_seed
    add_seedling:
      return_type: void
      args: [species_index: "plant::util::index"]
      name_cpp: r_add_seedling
    compute_environment:
      return_type: void
      name_cpp: r_compute_environment
    compute_rates:
      return_type: void
      name_cpp: r_compute_rates
    # TODO: Not 100% sure this is needed from R:
    reset:
      return_type: void
    # Because we now care about time, we need to make sure that the
    # setter function passes time along, so can't be done via the
    # active binding (unlike Species, Cohort, etc).
    set_ode_state:
      return_type: void
      access: function
      name_cpp: "plant::ode::r_set_ode_state"
      args: [values: "plant::ode::state_type", time: double]
    derivs:
      return_type: "plant::ode::state_type"
      access: function
      name_cpp: "plant::ode::r_derivs"
      args: [y: "const plant::ode::state_type&", time: double]
    set_state:
      args: [time: double, state: "const std::vector<double>&", n: "const std::vector<size_t>&"]
      name_cpp: r_set_state
      return_type: void
    deaths:
      return_type: "std::vector<size_t>"

StochasticPatchRunner:
  name_cpp: "plant::StochasticPatchRunner<T,E>"
  templates:
    parameters: [T,E]
    concrete:
      - ["FF16": "plant::FF16_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["FF16r": "plant::FF16r_Strategy", "FF16_Env": "plant::FF16_Environment"]
      - ["K93": "plant::K93_Strategy", "K93_Env": "plant::K93_Environment"]
  constructor:
    args: [parameters: "plant::Parameters<T,E>"]
  methods:
    run:
      return_type: void
    run_next:
      return_type: "plant::util::index"
      name_cpp: r_run_next
    reset:
      return_type: void
    set_schedule_times:
      args: [times: "std::vector<std::vector<double> >"]
      return_type: void
      name_cpp: r_set_schedule_times
  active:
    complete: {type: bool, access: member}
    time: {type: double, access: member}
    parameters: {type: "plant::Parameters<T,E>", access: member, name_cpp: r_parameters}
    patch:
      type: "plant::StochasticPatch<T,E>"
      access: member
      name_cpp: r_patch
    schedule:
      type: "plant::CohortSchedule"
      access: member
      name_cpp: r_schedule
      name_cpp_set: r_set_schedule
    state:
      type: "Rcpp::List"
      access: function
      name_cpp: "plant::get_state"

Canopy:
  name_cpp: "plant::Canopy"
  constructor:
    args: [control: "plant::Control"]
  methods:
    canopy_openness:
      args: [height: double]
      return_type: double
    clear:
      return_type: void
  active:
    canopy_interpolator: {type: "plant::interpolator::Interpolator", access: field}

FF16_Strategy:
  name_cpp: "plant::FF16_Strategy"
  roxygen: |
    Strategy parameters that tune various aspects of the biological model.
    @title Strategy parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - lma: double
    - rho: double
    - hmat: double
    - omega: double
    - eta: double
    - theta: double
    - a_l1: double
    - a_l2: double
    - a_r1: double
    - a_b1: double
    - r_s: double
    - r_b: double
    - r_r: double
    - r_l: double
    - a_y: double
    - a_bio: double
    - k_l: double
    - k_b: double
    - k_s: double
    - k_r: double
    - a_p1: double
    - a_p2: double
    - a_f3: double
    - a_f1: double
    - a_f2: double
    - S_D: double
    - a_d0: double
    - d_I: double
    - a_dG1: double
    - a_dG2: double
    - k_I: double
    - control: "plant::Control" 
    - collect_all_auxillary: bool

FF16_Environment:
  name_cpp: "plant::FF16_Environment"
  constructor:
    args: [disturbance_mean_interval: double, seed_rain: "std::vector<double>", control: "plant::Control"]
    roxygen: |
      FF16_Environment object
      @param disturbance_mean_interval mean disturbance interval in years
      @param seed_rain vector of seed rains
      @param control A Control object
      @export
  methods:
    canopy_openness:
      args: [height: double]
      return_type: double
    patch_survival_conditional:
      args: [time_at_birth: double]
      return_type: double
    clear:
      return_type: void
    set_seed_rain_index:
      args: [x: "plant::util::index"]
      return_type: void
      name_cpp: r_set_seed_rain_index
    set_fixed_environment:
      args: [value: double, height_max: double]
      return_type: void
  active:
    patch_survival: {type: double, access: member}
    seed_rain_dt: {type: double, access: member}
    disturbance_regime: {type: "plant::Disturbance", access: field}
    time: {type: double, access: field}
    canopy: {type: "plant::Canopy", access: field}


# The following strategy was built from FF16 on Wed Aug 12 11:12:34 2020
FF16r_Strategy:
  name_cpp: "plant::FF16r_Strategy"
  roxygen: |
    Strategy parameters that tune various aspects of the biological model.
    @title Strategy parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - lma: double
    - rho: double
    - hmat: double
    - omega: double
    - eta: double
    - theta: double
    - a_l1: double
    - a_l2: double
    - a_r1: double
    - a_b1: double
    - r_s: double
    - r_b: double
    - r_r: double
    - r_l: double
    - a_y: double
    - a_bio: double
    - k_l: double
    - k_b: double
    - k_s: double
    - k_r: double
    - a_p1: double
    - a_p2: double
    - a_f3: double
    - a_f1: double
    - a_f2: double
    - S_D: double
    - a_d0: double
    - d_I: double
    - a_dG1: double
    - a_dG2: double
    - k_I: double
    - control: "plant::Control" 
    - collect_all_auxillary: bool

# The following strategy was built from FF16r on Wed Aug 12 15:33:08 2020
K93_Strategy:
  name_cpp: "plant::K93_Strategy"
  roxygen: |
    Strategy parameters that tune various aspects of the biological model.
    @title Strategy parameters
    @param ...,values Values to initialise the struct with (either as
    variadic arguments, or as a list, but not both).
    @export
  list:
    - height_0: double
    - b_0: double
    - b_1: double
    - b_2: double
    - c_0: double
    - c_1: double
    - d_0: double
    - d_1: double
    - S_D: double
    - eta: double
    - k_I: double
    - control: "plant::Control"


# The following environment was built from FF16r on Wed Aug 12 15:46:38 2020
K93_Environment:
  name_cpp: "plant::K93_Environment"
  constructor:
    args: [disturbance_mean_interval: double, seed_rain: "std::vector<double>", control: "plant::Control"]
    roxygen: |
      K93_Environment object
      @param disturbance_mean_interval mean disturbance interval in years
      @param seed_rain vector of seed rains
      @param control A Control object
      @export
  methods:
    canopy_openness:
      args: [height: double]
      return_type: double
    patch_survival_conditional:
      args: [time_at_birth: double]
      return_type: double
    clear:
      return_type: void
    set_seed_rain_index:
      args: [x: "plant::util::index"]
      return_type: void
      name_cpp: r_set_seed_rain_index
    set_fixed_environment:
      args: [value: double, height_max: double]
      return_type: void
  active:
    patch_survival: {type: double, access: member}
    seed_rain_dt: {type: double, access: member}
    disturbance_regime: {type: "plant::Disturbance", access: field}
    time: {type: double, access: field}
    canopy: {type: "plant::Canopy", access: field}

