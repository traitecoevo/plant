// Generated by RcppR6 (0.2.4): do not edit by hand
#include <plant.h>

// [[Rcpp::export]]
plant::ode::test::Lorenz Lorenz__ctor(double sigma, double R, double b) {
  return plant::ode::test::Lorenz(sigma, R, b);
}
// [[Rcpp::export]]
size_t Lorenz__ode_size__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Lorenz__ode_state__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Lorenz__ode_state__set(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Lorenz__ode_rates__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<double> Lorenz__pars__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return obj_->pars();
}


// [[Rcpp::export]]
plant::ode::test::OdeR OdeR__ctor(Rcpp::Function derivs, Rcpp::Function state, double time) {
  return plant::ode::test::OdeR(derivs, state, time);
}
// [[Rcpp::export]]
void OdeR__update_state(plant::RcppR6::RcppR6<plant::ode::test::OdeR> obj_) {
  obj_->update_state();
}

// [[Rcpp::export]]
plant::ode::Runner<plant::ode::test::Lorenz> OdeRunner___Lorenz__ctor(plant::ode::test::Lorenz obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::ode::test::Lorenz>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___Lorenz__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___Lorenz__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___Lorenz__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::ode::test::Lorenz OdeRunner___Lorenz__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::ode::test::OdeR> OdeRunner___OdeR__ctor(plant::ode::test::OdeR obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::ode::test::OdeR>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___OdeR__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___OdeR__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___OdeR__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::ode::test::OdeR OdeRunner___OdeR__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > OdeRunner___FF16__ctor(plant::tools::PlantRunner<plant::FF16_Strategy> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___FF16__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___FF16__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___FF16__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___FF16__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___FF16__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::PlantRunner<plant::FF16_Strategy> OdeRunner___FF16__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16_Strategy> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > OdeRunner___FF16r__ctor(plant::tools::PlantRunner<plant::FF16r_Strategy> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___FF16r__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___FF16r__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___FF16r__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___FF16r__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::PlantRunner<plant::FF16r_Strategy> OdeRunner___FF16r__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::PlantRunner<plant::FF16r_Strategy> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::CohortScheduleEvent CohortScheduleEvent__ctor(double introduction, plant::util::index species_index) {
  return plant::CohortScheduleEvent(introduction, species_index);
}
// [[Rcpp::export]]
plant::util::index CohortScheduleEvent__species_index__get(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_) {
  return obj_->species_index;
}
// [[Rcpp::export]]
void CohortScheduleEvent__species_index__set(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_, plant::util::index value) {
  obj_->species_index = value;
}

// [[Rcpp::export]]
std::vector<double> CohortScheduleEvent__times__get(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_) {
  return obj_->times;
}

// [[Rcpp::export]]
double CohortScheduleEvent__time_introduction__get(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_) {
  return obj_->time_introduction();
}

// [[Rcpp::export]]
double CohortScheduleEvent__time_end__get(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_) {
  return obj_->time_end();
}

// [[Rcpp::export]]
size_t CohortScheduleEvent__species_index_raw__get(plant::RcppR6::RcppR6<plant::CohortScheduleEvent> obj_) {
  return obj_->species_index_raw();
}


// [[Rcpp::export]]
plant::CohortSchedule CohortSchedule__ctor(size_t n_species) {
  return plant::CohortSchedule(n_species);
}
// [[Rcpp::export]]
plant::CohortSchedule CohortSchedule__expand(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, size_t n_extra, std::vector<double> times) {
  return obj_->expand(n_extra, times);
}
// [[Rcpp::export]]
void CohortSchedule__clear_times(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, plant::util::index species_index) {
  obj_->clear_times(species_index);
}
// [[Rcpp::export]]
void CohortSchedule__clear_ode_times(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  obj_->r_clear_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__set_times(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, std::vector<double> times, plant::util::index species_index) {
  obj_->r_set_times(times, species_index);
}
// [[Rcpp::export]]
std::vector<double> CohortSchedule__times(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, plant::util::index species_index) {
  return obj_->r_times(species_index);
}
// [[Rcpp::export]]
void CohortSchedule__reset(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void CohortSchedule__pop(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  obj_->pop();
}
// [[Rcpp::export]]
plant::CohortSchedule CohortSchedule__copy(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->r_copy();
}
// [[Rcpp::export]]
size_t CohortSchedule__size__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t CohortSchedule__n_species__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->get_n_species();
}

// [[Rcpp::export]]
plant::CohortScheduleEvent CohortSchedule__next_event__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->next_event();
}

// [[Rcpp::export]]
size_t CohortSchedule__remaining__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->remaining();
}

// [[Rcpp::export]]
double CohortSchedule__max_time__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->get_max_time();
}
// [[Rcpp::export]]
void CohortSchedule__max_time__set(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, double value) {
  obj_->r_set_max_time(value);
}

// [[Rcpp::export]]
std::vector<double> CohortSchedule__ode_times__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->r_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__ode_times__set(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, std::vector<double> value) {
  obj_->r_set_ode_times(value);
}

// [[Rcpp::export]]
bool CohortSchedule__use_ode_times__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->using_ode_times();
}
// [[Rcpp::export]]
void CohortSchedule__use_ode_times__set(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
SEXP CohortSchedule__all_times__get(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_) {
  return obj_->r_all_times();
}
// [[Rcpp::export]]
void CohortSchedule__all_times__set(plant::RcppR6::RcppR6<plant::CohortSchedule> obj_, SEXP value) {
  obj_->r_set_all_times(value);
}


// [[Rcpp::export]]
plant::Disturbance Disturbance__ctor(double mean_interval) {
  return plant::Disturbance(mean_interval);
}
// [[Rcpp::export]]
std::vector<double> Disturbance__density(plant::RcppR6::RcppR6<plant::Disturbance> obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Disturbance__pr_survival(plant::RcppR6::RcppR6<plant::Disturbance> obj_, double time) {
  return obj_->pr_survival(time);
}
// [[Rcpp::export]]
double Disturbance__pr_survival_conditional(plant::RcppR6::RcppR6<plant::Disturbance> obj_, double time, double time_start) {
  return obj_->pr_survival_conditional(time, time_start);
}
// [[Rcpp::export]]
double Disturbance__cdf(plant::RcppR6::RcppR6<plant::Disturbance> obj_, double time) {
  return obj_->cdf(time);
}
// [[Rcpp::export]]
double Disturbance__mean_interval__get(plant::RcppR6::RcppR6<plant::Disturbance> obj_) {
  return obj_->r_mean_interval();
}


// [[Rcpp::export]]
SEXP Control__ctor() {
  return Rcpp::wrap(plant::Control());
}


// [[Rcpp::export]]
SEXP OdeControl__ctor() {
  return Rcpp::wrap(plant::ode::OdeControl());
}


// [[Rcpp::export]]
plant::quadrature::QK QK__ctor(size_t rule) {
  return plant::quadrature::QK(rule);
}
// [[Rcpp::export]]
double QK__integrate(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
std::vector<double> QK__integrate_vector_x(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, double a, double b) {
  return obj_->integrate_vector_x(a, b);
}
// [[Rcpp::export]]
double QK__integrate_vector(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, std::vector<double> y, double a, double b) {
  return obj_->integrate_vector(y, a, b);
}
// [[Rcpp::export]]
double QK__last_area__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QK__last_error__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
double QK__last_area_abs__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area_abs();
}

// [[Rcpp::export]]
double QK__last_area_asc__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area_asc();
}


// [[Rcpp::export]]
plant::quadrature::QAG QAG__ctor(size_t rule, size_t max_iterations, double atol, double rtol) {
  return plant::quadrature::QAG(rule, max_iterations, atol, rtol);
}
// [[Rcpp::export]]
double QAG__integrate(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
double QAG__integrate_with_intervals(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, SEXP intervals) {
  return obj_->r_integrate_with_intervals(f, intervals);
}
// [[Rcpp::export]]
double QAG__integrate_with_last_intervals(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate_with_last_intervals(f, a, b);
}
// [[Rcpp::export]]
double QAG__last_area__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QAG__last_error__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
size_t QAG__last_iterations__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_iterations();
}

// [[Rcpp::export]]
plant::quadrature::intervals_type QAG__last_intervals__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_intervals();
}

// [[Rcpp::export]]
bool QAG__is_adaptive__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->is_adaptive();
}


// [[Rcpp::export]]
plant::interpolator::Interpolator Interpolator__ctor() {
  return plant::interpolator::Interpolator();
}
// [[Rcpp::export]]
void Interpolator__init(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_, const std::vector<double>& x, const std::vector<double>& y) {
  obj_->init(x, y);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__eval(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_, std::vector<double> x) {
  return obj_->r_eval(x);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__x__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->get_x();
}

// [[Rcpp::export]]
std::vector<double> Interpolator__y__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->get_y();
}

// [[Rcpp::export]]
SEXP Interpolator__xy__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->r_get_xy();
}

// [[Rcpp::export]]
size_t Interpolator__size__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Interpolator__min__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->min();
}

// [[Rcpp::export]]
double Interpolator__max__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->max();
}


// [[Rcpp::export]]
plant::Environment Environment__ctor(double disturbance_mean_interval, std::vector<double> seed_rain, plant::Control control) {
  return plant::Environment(disturbance_mean_interval, seed_rain, control);
}
// [[Rcpp::export]]
double Environment__canopy_openness(plant::RcppR6::RcppR6<plant::Environment> obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
double Environment__patch_survival_conditional(plant::RcppR6::RcppR6<plant::Environment> obj_, double time_at_birth) {
  return obj_->patch_survival_conditional(time_at_birth);
}
// [[Rcpp::export]]
void Environment__clear(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Environment__set_seed_rain_index(plant::RcppR6::RcppR6<plant::Environment> obj_, plant::util::index x) {
  obj_->r_set_seed_rain_index(x);
}
// [[Rcpp::export]]
double Environment__patch_survival__get(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  return obj_->patch_survival();
}

// [[Rcpp::export]]
double Environment__seed_rain_dt__get(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  return obj_->seed_rain_dt();
}

// [[Rcpp::export]]
plant::Disturbance Environment__disturbance_regime__get(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  return obj_->disturbance_regime;
}
// [[Rcpp::export]]
void Environment__disturbance_regime__set(plant::RcppR6::RcppR6<plant::Environment> obj_, plant::Disturbance value) {
  obj_->disturbance_regime = value;
}

// [[Rcpp::export]]
double Environment__time__get(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  return obj_->time;
}
// [[Rcpp::export]]
void Environment__time__set(plant::RcppR6::RcppR6<plant::Environment> obj_, double value) {
  obj_->time = value;
}

// [[Rcpp::export]]
plant::interpolator::Interpolator Environment__light_environment__get(plant::RcppR6::RcppR6<plant::Environment> obj_) {
  return obj_->light_environment;
}
// [[Rcpp::export]]
void Environment__light_environment__set(plant::RcppR6::RcppR6<plant::Environment> obj_, plant::interpolator::Interpolator value) {
  obj_->light_environment = value;
}


// [[Rcpp::export]]
SEXP Plant_internals__ctor() {
  return Rcpp::wrap(plant::Plant_internals());
}


// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy> Plant___FF16__ctor(plant::FF16_Strategy s) {
  return plant::make_plant<plant::FF16_Strategy>(s);
}
// [[Rcpp::export]]
double Plant___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void Plant___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double Plant___FF16__germination_probability(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
void Plant___FF16__reset_mortality(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Plant___FF16__height__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void Plant___FF16__height__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double Plant___FF16__mortality__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void Plant___FF16__mortality__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double Plant___FF16__fecundity__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void Plant___FF16__fecundity__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
plant::FF16_Strategy Plant___FF16__strategy__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy>::internals Plant___FF16__internals__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Plant___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Plant___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Plant___FF16__ode_state__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Plant___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Plant___FF16__ode_names__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
double Plant___FF16__mortality_probability__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Plant___FF16__strategy_name__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16_Strategy> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy> Plant___FF16r__ctor(plant::FF16r_Strategy s) {
  return plant::make_plant<plant::FF16r_Strategy>(s);
}
// [[Rcpp::export]]
double Plant___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void Plant___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double Plant___FF16r__germination_probability(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
void Plant___FF16r__reset_mortality(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Plant___FF16r__height__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void Plant___FF16r__height__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double Plant___FF16r__mortality__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void Plant___FF16r__mortality__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double Plant___FF16r__fecundity__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void Plant___FF16r__fecundity__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
plant::FF16r_Strategy Plant___FF16r__strategy__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy>::internals Plant___FF16r__internals__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Plant___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Plant___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Plant___FF16r__ode_state__set(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Plant___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Plant___FF16r__ode_names__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
double Plant___FF16r__mortality_probability__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Plant___FF16r__strategy_name__get(plant::RcppR6::RcppR6<plant::Plant<plant::FF16r_Strategy> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::tools::PlantRunner<plant::FF16_Strategy> PlantRunner___FF16__ctor(plant::PlantPlus<plant::FF16_Strategy> plant, plant::Environment environment) {
  return plant::tools::PlantRunner<plant::FF16_Strategy>(plant, environment);
}
// [[Rcpp::export]]
plant::PlantPlus<plant::FF16_Strategy> PlantRunner___FF16__plant__get(plant::RcppR6::RcppR6<plant::tools::PlantRunner<plant::FF16_Strategy> > obj_) {
  return obj_->plant;
}
// [[Rcpp::export]]
void PlantRunner___FF16__plant__set(plant::RcppR6::RcppR6<plant::tools::PlantRunner<plant::FF16_Strategy> > obj_, plant::PlantPlus<plant::FF16_Strategy> value) {
  obj_->plant = value;
}


// [[Rcpp::export]]
plant::tools::PlantRunner<plant::FF16r_Strategy> PlantRunner___FF16r__ctor(plant::PlantPlus<plant::FF16r_Strategy> plant, plant::Environment environment) {
  return plant::tools::PlantRunner<plant::FF16r_Strategy>(plant, environment);
}
// [[Rcpp::export]]
plant::PlantPlus<plant::FF16r_Strategy> PlantRunner___FF16r__plant__get(plant::RcppR6::RcppR6<plant::tools::PlantRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->plant;
}
// [[Rcpp::export]]
void PlantRunner___FF16r__plant__set(plant::RcppR6::RcppR6<plant::tools::PlantRunner<plant::FF16r_Strategy> > obj_, plant::PlantPlus<plant::FF16r_Strategy> value) {
  obj_->plant = value;
}


// [[Rcpp::export]]
SEXP FF16_Strategy__ctor() {
  return Rcpp::wrap(plant::FF16_Strategy());
}


// [[Rcpp::export]]
SEXP FF16r_Strategy__ctor() {
  return Rcpp::wrap(plant::FF16r_Strategy());
}


// [[Rcpp::export]]
SEXP Parameters___FF16__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::FF16_Strategy>());
}
// [[Rcpp::export]]
SEXP Parameters___FF16__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::FF16_Strategy> >(obj));
}


// [[Rcpp::export]]
SEXP Parameters___FF16r__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::FF16r_Strategy>());
}
// [[Rcpp::export]]
SEXP Parameters___FF16r__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::FF16r_Strategy> >(obj));
}


// [[Rcpp::export]]
plant::PlantPlus<plant::FF16_Strategy> PlantPlus___FF16__ctor(plant::FF16_Strategy strategy) {
  return plant::make_plant_plus<plant::FF16_Strategy>(strategy);
}
// [[Rcpp::export]]
double PlantPlus___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void PlantPlus___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void PlantPlus___FF16__compute_vars_growth(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  obj_->compute_vars_growth();
}
// [[Rcpp::export]]
double PlantPlus___FF16__germination_probability(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy> PlantPlus___FF16__to_plant(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->to_plant();
}
// [[Rcpp::export]]
double PlantPlus___FF16__height__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void PlantPlus___FF16__height__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16__mortality__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void PlantPlus___FF16__mortality__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16__fecundity__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void PlantPlus___FF16__fecundity__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16__area_heartwood__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->area_heartwood();
}
// [[Rcpp::export]]
void PlantPlus___FF16__area_heartwood__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_area_heartwood(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16__mass_heartwood__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->mass_heartwood();
}
// [[Rcpp::export]]
void PlantPlus___FF16__mass_heartwood__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, double value) {
  obj_->set_mass_heartwood(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16__area_leaf__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
plant::FF16_Strategy PlantPlus___FF16__strategy__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::PlantPlus_internals PlantPlus___FF16__internals__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t PlantPlus___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type PlantPlus___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void PlantPlus___FF16__ode_state__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type PlantPlus___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> PlantPlus___FF16__ode_names__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::string PlantPlus___FF16__strategy_name__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16_Strategy> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::PlantPlus<plant::FF16r_Strategy> PlantPlus___FF16r__ctor(plant::FF16r_Strategy strategy) {
  return plant::make_plant_plus<plant::FF16r_Strategy>(strategy);
}
// [[Rcpp::export]]
double PlantPlus___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double h) {
  return obj_->area_leaf_above(h);
}
// [[Rcpp::export]]
void PlantPlus___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void PlantPlus___FF16r__compute_vars_growth(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  obj_->compute_vars_growth();
}
// [[Rcpp::export]]
double PlantPlus___FF16r__germination_probability(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy> PlantPlus___FF16r__to_plant(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->to_plant();
}
// [[Rcpp::export]]
double PlantPlus___FF16r__height__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->height();
}
// [[Rcpp::export]]
void PlantPlus___FF16r__height__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_height(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16r__mortality__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->mortality();
}
// [[Rcpp::export]]
void PlantPlus___FF16r__mortality__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_mortality(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16r__fecundity__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->fecundity();
}
// [[Rcpp::export]]
void PlantPlus___FF16r__fecundity__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_fecundity(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16r__area_heartwood__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->area_heartwood();
}
// [[Rcpp::export]]
void PlantPlus___FF16r__area_heartwood__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_area_heartwood(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16r__mass_heartwood__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->mass_heartwood();
}
// [[Rcpp::export]]
void PlantPlus___FF16r__mass_heartwood__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, double value) {
  obj_->set_mass_heartwood(value);
}

// [[Rcpp::export]]
double PlantPlus___FF16r__area_leaf__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
plant::FF16r_Strategy PlantPlus___FF16r__strategy__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::PlantPlus_internals PlantPlus___FF16r__internals__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t PlantPlus___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type PlantPlus___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void PlantPlus___FF16r__ode_state__set(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type PlantPlus___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> PlantPlus___FF16r__ode_names__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::string PlantPlus___FF16r__strategy_name__get(plant::RcppR6::RcppR6<plant::PlantPlus<plant::FF16r_Strategy> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
SEXP PlantPlus_internals__ctor() {
  return Rcpp::wrap(plant::PlantPlus_internals());
}


// [[Rcpp::export]]
plant::Cohort<plant::FF16_Strategy> Cohort___FF16__ctor(plant::FF16_Strategy strategy) {
  return plant::make_cohort<plant::FF16_Strategy>(strategy);
}
// [[Rcpp::export]]
double Cohort___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double Cohort___FF16__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Cohort___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void Cohort___FF16__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_initial_conditions(environment);
}
// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy> Cohort___FF16__plant__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->plant;
}

// [[Rcpp::export]]
double Cohort___FF16__height__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Cohort___FF16__log_density__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Cohort___FF16__area_leaf__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
double Cohort___FF16__fecundity__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Cohort___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Cohort___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Cohort___FF16__ode_state__set(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Cohort___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Cohort___FF16__ode_names__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16_Strategy> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Cohort<plant::FF16r_Strategy> Cohort___FF16r__ctor(plant::FF16r_Strategy strategy) {
  return plant::make_cohort<plant::FF16r_Strategy>(strategy);
}
// [[Rcpp::export]]
double Cohort___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double Cohort___FF16r__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Cohort___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
void Cohort___FF16r__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_initial_conditions(environment);
}
// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy> Cohort___FF16r__plant__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->plant;
}

// [[Rcpp::export]]
double Cohort___FF16r__height__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Cohort___FF16r__log_density__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Cohort___FF16r__area_leaf__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->area_leaf();
}

// [[Rcpp::export]]
double Cohort___FF16r__fecundity__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Cohort___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Cohort___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Cohort___FF16r__ode_state__set(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Cohort___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Cohort___FF16r__ode_names__get(plant::RcppR6::RcppR6<plant::Cohort<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Species<plant::FF16_Strategy> Species___FF16__ctor(plant::FF16_Strategy strategy) {
  return plant::Species<plant::FF16_Strategy>(strategy);
}
// [[Rcpp::export]]
void Species___FF16__clear(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double Species___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
void Species___FF16__add_seed(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  obj_->add_seed();
}
// [[Rcpp::export]]
plant::Cohort<plant::FF16_Strategy> Species___FF16__cohort_at(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, plant::util::index index) {
  return obj_->r_cohort_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___FF16__area_leafs_error(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, double scal) {
  return obj_->r_area_leafs_error(scal);
}
// [[Rcpp::export]]
size_t Species___FF16__size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Cohort<plant::FF16_Strategy> Species___FF16__seed__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->r_seed();
}

// [[Rcpp::export]]
double Species___FF16__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___FF16__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Cohort<plant::FF16_Strategy> > Species___FF16__cohorts__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->r_cohorts();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__seeds__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->seeds();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__area_leafs__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->r_area_leafs();
}

// [[Rcpp::export]]
size_t Species___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___FF16__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Species<plant::FF16r_Strategy> Species___FF16r__ctor(plant::FF16r_Strategy strategy) {
  return plant::Species<plant::FF16r_Strategy>(strategy);
}
// [[Rcpp::export]]
void Species___FF16r__clear(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double Species___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
void Species___FF16r__add_seed(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  obj_->add_seed();
}
// [[Rcpp::export]]
plant::Cohort<plant::FF16r_Strategy> Species___FF16r__cohort_at(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, plant::util::index index) {
  return obj_->r_cohort_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___FF16r__area_leafs_error(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, double scal) {
  return obj_->r_area_leafs_error(scal);
}
// [[Rcpp::export]]
size_t Species___FF16r__size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Cohort<plant::FF16r_Strategy> Species___FF16r__seed__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->r_seed();
}

// [[Rcpp::export]]
double Species___FF16r__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___FF16r__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Cohort<plant::FF16r_Strategy> > Species___FF16r__cohorts__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->r_cohorts();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__seeds__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->seeds();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__area_leafs__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->r_area_leafs();
}

// [[Rcpp::export]]
size_t Species___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___FF16r__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Patch<plant::FF16_Strategy> Patch___FF16__ctor(plant::Parameters<plant::FF16_Strategy> parameters) {
  return plant::Patch<plant::FF16_Strategy>(parameters);
}
// [[Rcpp::export]]
double Patch___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double Patch___FF16__canopy_openness(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
void Patch___FF16__add_seed(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  obj_->r_add_seed(species_index);
}
// [[Rcpp::export]]
void Patch___FF16__compute_light_environment(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  obj_->r_compute_light_environment();
}
// [[Rcpp::export]]
void Patch___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  obj_->r_compute_vars_phys();
}
// [[Rcpp::export]]
void Patch___FF16__reset(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___FF16__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___FF16__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& light_env) {
  obj_->r_set_state(time, state, n, light_env);
}
// [[Rcpp::export]]
double Patch___FF16__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___FF16__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___FF16__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy> Patch___FF16__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Environment Patch___FF16__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::FF16_Strategy> > Patch___FF16__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___FF16__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Patch<plant::FF16r_Strategy> Patch___FF16r__ctor(plant::Parameters<plant::FF16r_Strategy> parameters) {
  return plant::Patch<plant::FF16r_Strategy>(parameters);
}
// [[Rcpp::export]]
double Patch___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double Patch___FF16r__canopy_openness(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
void Patch___FF16r__add_seed(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  obj_->r_add_seed(species_index);
}
// [[Rcpp::export]]
void Patch___FF16r__compute_light_environment(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  obj_->r_compute_light_environment();
}
// [[Rcpp::export]]
void Patch___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  obj_->r_compute_vars_phys();
}
// [[Rcpp::export]]
void Patch___FF16r__reset(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___FF16r__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___FF16r__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& light_env) {
  obj_->r_set_state(time, state, n, light_env);
}
// [[Rcpp::export]]
double Patch___FF16r__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___FF16r__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___FF16r__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy> Patch___FF16r__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Environment Patch___FF16r__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::FF16r_Strategy> > Patch___FF16r__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___FF16r__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::SCM<plant::FF16_Strategy> SCM___FF16__ctor(plant::Parameters<plant::FF16_Strategy> parameters) {
  return plant::SCM<plant::FF16_Strategy>(parameters);
}
// [[Rcpp::export]]
void SCM___FF16__run(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___FF16__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___FF16__reset(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___FF16__seed_rain(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_seed_rain(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16__seed_rain_cohort(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_seed_rain_cohort(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16__area_leaf_error(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_area_leaf_error(species_index);
}
// [[Rcpp::export]]
void SCM___FF16__set_cohort_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_cohort_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___FF16__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___FF16__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16__seed_rains__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->seed_rains();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy> SCM___FF16__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::FF16_Strategy> SCM___FF16__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::CohortSchedule SCM___FF16__cohort_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_cohort_schedule();
}
// [[Rcpp::export]]
void SCM___FF16__cohort_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, plant::CohortSchedule value) {
  obj_->r_set_cohort_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
bool SCM___FF16__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___FF16__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___FF16__seed_rain_error__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy> > obj_) {
  return obj_->r_seed_rain_error();
}


// [[Rcpp::export]]
plant::SCM<plant::FF16r_Strategy> SCM___FF16r__ctor(plant::Parameters<plant::FF16r_Strategy> parameters) {
  return plant::SCM<plant::FF16r_Strategy>(parameters);
}
// [[Rcpp::export]]
void SCM___FF16r__run(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___FF16r__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___FF16r__reset(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___FF16r__seed_rain(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_seed_rain(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16r__seed_rain_cohort(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_seed_rain_cohort(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16r__area_leaf_error(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_area_leaf_error(species_index);
}
// [[Rcpp::export]]
void SCM___FF16r__set_cohort_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_cohort_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___FF16r__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___FF16r__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16r__seed_rains__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->seed_rains();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy> SCM___FF16r__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::FF16r_Strategy> SCM___FF16r__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::CohortSchedule SCM___FF16r__cohort_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_cohort_schedule();
}
// [[Rcpp::export]]
void SCM___FF16r__cohort_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, plant::CohortSchedule value) {
  obj_->r_set_cohort_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16r__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16r__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
bool SCM___FF16r__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___FF16r__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___FF16r__seed_rain_error__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy> > obj_) {
  return obj_->r_seed_rain_error();
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::FF16_Strategy> StochasticSpecies___FF16__ctor(plant::FF16_Strategy strategy) {
  return plant::StochasticSpecies<plant::FF16_Strategy>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__add_seed(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  obj_->add_seed();
}
// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy> StochasticSpecies___FF16__plant_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, plant::util::index index) {
  return obj_->r_plant_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___FF16__germination_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16__size_plants__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->size_plants();
}

// [[Rcpp::export]]
plant::Plant<plant::FF16_Strategy> StochasticSpecies___FF16__seed__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->r_seed();
}

// [[Rcpp::export]]
double StochasticSpecies___FF16__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Plant<plant::FF16_Strategy> > StochasticSpecies___FF16__plants__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->r_plants();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___FF16__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16__seeds__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->seeds();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::FF16r_Strategy> StochasticSpecies___FF16r__ctor(plant::FF16r_Strategy strategy) {
  return plant::StochasticSpecies<plant::FF16r_Strategy>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  obj_->compute_vars_phys(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__add_seed(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  obj_->add_seed();
}
// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy> StochasticSpecies___FF16r__plant_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, plant::util::index index) {
  return obj_->r_plant_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___FF16r__germination_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, const plant::Environment& environment) {
  return obj_->germination_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__size_plants__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->size_plants();
}

// [[Rcpp::export]]
plant::Plant<plant::FF16r_Strategy> StochasticSpecies___FF16r__seed__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->r_seed();
}

// [[Rcpp::export]]
double StochasticSpecies___FF16r__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16r__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Plant<plant::FF16r_Strategy> > StochasticSpecies___FF16r__plants__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->r_plants();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___FF16r__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16r__seeds__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->seeds();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16_Strategy> StochasticPatch___FF16__ctor(plant::Parameters<plant::FF16_Strategy> parameters) {
  return plant::StochasticPatch<plant::FF16_Strategy>(parameters);
}
// [[Rcpp::export]]
double StochasticPatch___FF16__area_leaf_above(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double StochasticPatch___FF16__canopy_openness(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
bool StochasticPatch___FF16__add_seed(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_add_seed(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__add_seedling(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, plant::util::index species_index) {
  obj_->r_add_seedling(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__compute_light_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  obj_->r_compute_light_environment();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__compute_vars_phys(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  obj_->r_compute_vars_phys();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___FF16__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___FF16__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy> StochasticPatch___FF16__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Environment StochasticPatch___FF16__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::FF16_Strategy> > StochasticPatch___FF16__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16r_Strategy> StochasticPatch___FF16r__ctor(plant::Parameters<plant::FF16r_Strategy> parameters) {
  return plant::StochasticPatch<plant::FF16r_Strategy>(parameters);
}
// [[Rcpp::export]]
double StochasticPatch___FF16r__area_leaf_above(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->area_leaf_above(height);
}
// [[Rcpp::export]]
double StochasticPatch___FF16r__canopy_openness(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
bool StochasticPatch___FF16r__add_seed(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  return obj_->r_add_seed(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__add_seedling(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, plant::util::index species_index) {
  obj_->r_add_seedling(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__compute_light_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  obj_->r_compute_light_environment();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__compute_vars_phys(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  obj_->r_compute_vars_phys();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___FF16r__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___FF16r__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16r__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16r__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy> StochasticPatch___FF16r__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Environment StochasticPatch___FF16r__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::FF16r_Strategy> > StochasticPatch___FF16r__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16r__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16r__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::FF16_Strategy> StochasticPatchRunner___FF16__ctor(plant::Parameters<plant::FF16_Strategy> parameters) {
  return plant::StochasticPatchRunner<plant::FF16_Strategy>(parameters);
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___FF16__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___FF16__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___FF16__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy> StochasticPatchRunner___FF16__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16_Strategy> StochasticPatchRunner___FF16__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::CohortSchedule StochasticPatchRunner___FF16__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_, plant::CohortSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___FF16__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::FF16r_Strategy> StochasticPatchRunner___FF16r__ctor(plant::Parameters<plant::FF16r_Strategy> parameters) {
  return plant::StochasticPatchRunner<plant::FF16r_Strategy>(parameters);
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___FF16r__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___FF16r__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___FF16r__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy> StochasticPatchRunner___FF16r__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16r_Strategy> StochasticPatchRunner___FF16r__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::CohortSchedule StochasticPatchRunner___FF16r__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_, plant::CohortSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___FF16r__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
double cohort_schedule_max_time_default__Parameters___FF16(const plant::Parameters<plant::FF16_Strategy>& p) {
   return plant::cohort_schedule_max_time_default<plant::Parameters<plant::FF16_Strategy> >(p);
}
// [[Rcpp::export]]
double cohort_schedule_max_time_default__Parameters___FF16r(const plant::Parameters<plant::FF16r_Strategy>& p) {
   return plant::cohort_schedule_max_time_default<plant::Parameters<plant::FF16r_Strategy> >(p);
}

// [[Rcpp::export]]
plant::CohortSchedule cohort_schedule_default__Parameters___FF16(const plant::Parameters<plant::FF16_Strategy>& p) {
   return plant::cohort_schedule_default<plant::Parameters<plant::FF16_Strategy> >(p);
}
// [[Rcpp::export]]
plant::CohortSchedule cohort_schedule_default__Parameters___FF16r(const plant::Parameters<plant::FF16r_Strategy>& p) {
   return plant::cohort_schedule_default<plant::Parameters<plant::FF16r_Strategy> >(p);
}

// [[Rcpp::export]]
plant::CohortSchedule make_cohort_schedule__Parameters___FF16(const plant::Parameters<plant::FF16_Strategy>& p) {
   return plant::make_cohort_schedule<plant::Parameters<plant::FF16_Strategy> >(p);
}
// [[Rcpp::export]]
plant::CohortSchedule make_cohort_schedule__Parameters___FF16r(const plant::Parameters<plant::FF16r_Strategy>& p) {
   return plant::make_cohort_schedule<plant::Parameters<plant::FF16r_Strategy> >(p);
}
