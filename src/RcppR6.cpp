// Generated by RcppR6 (0.2.4): do not edit by hand
#include <plant.h>

// [[Rcpp::export]]
plant::Leaf Leaf__ctor(double vcmax, double p_50, double c, double b, double psi_crit, double beta, double beta_2, double huber_value, double K_s, double epsilon_leaf) {
  return plant::Leaf(vcmax, p_50, c, b, psi_crit, beta, beta_2, huber_value, K_s, epsilon_leaf);
}
// [[Rcpp::export]]
void Leaf__initialize_integrator(plant::RcppR6::RcppR6<plant::Leaf> obj_, int integration_rule, double integration_tol) {
  obj_->initialize_integrator(integration_rule, integration_tol);
}
// [[Rcpp::export]]
double Leaf__calc_cond_vuln(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi) {
  return obj_->calc_cond_vuln(psi);
}
// [[Rcpp::export]]
double Leaf__calc_E_supply(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_E_supply(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_E_supply_full_integration(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_E_supply_full_integration(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_g_c(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_g_c(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_A_c(plant::RcppR6::RcppR6<plant::Leaf> obj_, double ci_) {
  return obj_->calc_A_c(ci_);
}
// [[Rcpp::export]]
double Leaf__calc_A_j(plant::RcppR6::RcppR6<plant::Leaf> obj_, double ci_) {
  return obj_->calc_A_j(ci_);
}
// [[Rcpp::export]]
double Leaf__calc_A_lim(plant::RcppR6::RcppR6<plant::Leaf> obj_, double ci_) {
  return obj_->calc_A_lim(ci_);
}
// [[Rcpp::export]]
double Leaf__diff_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_, double x, double psi_stem) {
  return obj_->diff_ci(x, psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_assim_gross(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_assim_gross(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_hydraulic_cost_Sperry(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_hydraulic_cost_Sperry(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_profit_Sperry(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_profit_Sperry(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_hydraulic_cost_Bartlett(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_hydraulic_cost_Bartlett(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_profit_Bartlett(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_profit_Bartlett(psi_stem);
}
// [[Rcpp::export]]
double Leaf__optimise_psi_stem_Bartlett(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_psi_stem_Bartlett();
}
// [[Rcpp::export]]
double Leaf__optimise_psi_stem_Sperry(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_psi_stem_Sperry();
}
// [[Rcpp::export]]
double Leaf__optimise_ci_Bartlett(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_ci_Bartlett();
}
// [[Rcpp::export]]
double Leaf__calc_profit_Bartlett_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_, double c_i) {
  return obj_->calc_profit_Bartlett_ci(c_i);
}
// [[Rcpp::export]]
double Leaf__calc_assim_gross_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_, double c_i) {
  return obj_->calc_assim_gross_ci(c_i);
}
// [[Rcpp::export]]
double Leaf__calc_psi_stem_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_, double E_ci) {
  return obj_->calc_psi_stem_ci(E_ci);
}
// [[Rcpp::export]]
double Leaf__calc_profit_Sperry_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_, double c_i) {
  return obj_->calc_profit_Sperry_ci(c_i);
}
// [[Rcpp::export]]
double Leaf__optimise_psi_stem_Sperry_Newton(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_psi_stem_Sperry_Newton();
}
// [[Rcpp::export]]
double Leaf__optimise_psi_stem_Sperry_Newton_recall(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_psi_stem_Sperry_Newton_recall();
}
// [[Rcpp::export]]
double Leaf__optimise_ci_Sperry_Newton(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_ci_Sperry_Newton();
}
// [[Rcpp::export]]
double Leaf__optimise_ci_Sperry_Newton_recall(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_ci_Sperry_Newton_recall();
}
// [[Rcpp::export]]
double Leaf__find_max_ci(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->find_max_ci();
}
// [[Rcpp::export]]
void Leaf__optimise_psi_stem_Sperry_Newton_recall_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_guess) {
  obj_->optimise_psi_stem_Sperry_Newton_recall_one_line(psi_guess);
}
// [[Rcpp::export]]
double Leaf__calc_j(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->calc_j();
}
// [[Rcpp::export]]
double Leaf__calc_assim_gross_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_assim_gross_one_line(psi_stem);
}
// [[Rcpp::export]]
double Leaf__calc_profit_Sperry_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double psi_stem) {
  return obj_->calc_profit_Sperry_one_line(psi_stem);
}
// [[Rcpp::export]]
void Leaf__optimise_ci_Sperry_Newton_recall_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double ci_guess) {
  obj_->optimise_ci_Sperry_Newton_recall_one_line(ci_guess);
}
// [[Rcpp::export]]
double Leaf__calc_profit_Sperry_ci_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double c_i) {
  return obj_->calc_profit_Sperry_ci_one_line(c_i);
}
// [[Rcpp::export]]
double Leaf__calc_A_lim_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double c_i) {
  return obj_->calc_A_lim_one_line(c_i);
}
// [[Rcpp::export]]
double Leaf__optimise_psi_stem_Sperry_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->optimise_psi_stem_Sperry_one_line();
}
// [[Rcpp::export]]
void Leaf__set_physiology(plant::RcppR6::RcppR6<plant::Leaf> obj_, double PPFD, double psi_soil, double k_l_max, double atm_vpd) {
  obj_->set_physiology(PPFD, psi_soil, k_l_max, atm_vpd);
}
// [[Rcpp::export]]
void Leaf__optimise_psi_stem_Sperry_Newton_recall_one_line_pass(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  obj_->optimise_psi_stem_Sperry_Newton_recall_one_line_pass();
}
// [[Rcpp::export]]
double Leaf__find_max_ci_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->find_max_ci_one_line();
}
// [[Rcpp::export]]
void Leaf__optimise_ci_Sperry_Newton_recall_one_line_max(plant::RcppR6::RcppR6<plant::Leaf> obj_, double ci_guess) {
  obj_->optimise_ci_Sperry_Newton_recall_one_line_max(ci_guess);
}
// [[Rcpp::export]]
void Leaf__optimise_ci_Sperry_one_line(plant::RcppR6::RcppR6<plant::Leaf> obj_, double max_ci) {
  obj_->optimise_ci_Sperry_one_line(max_ci);
}
// [[Rcpp::export]]
double Leaf__ci__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->ci;
}
// [[Rcpp::export]]
void Leaf__ci__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->ci = value;
}

// [[Rcpp::export]]
double Leaf__g_c__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->g_c;
}
// [[Rcpp::export]]
void Leaf__g_c__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->g_c = value;
}

// [[Rcpp::export]]
double Leaf__A_lim__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->A_lim;
}
// [[Rcpp::export]]
void Leaf__A_lim__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->A_lim = value;
}

// [[Rcpp::export]]
double Leaf__E__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->E;
}
// [[Rcpp::export]]
void Leaf__E__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->E = value;
}

// [[Rcpp::export]]
double Leaf__psi__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->psi;
}
// [[Rcpp::export]]
void Leaf__psi__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->psi = value;
}

// [[Rcpp::export]]
double Leaf__profit__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->profit;
}
// [[Rcpp::export]]
void Leaf__profit__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->profit = value;
}

// [[Rcpp::export]]
double Leaf__psi_stem_next__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->psi_stem_next;
}
// [[Rcpp::export]]
void Leaf__psi_stem_next__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->psi_stem_next = value;
}

// [[Rcpp::export]]
double Leaf__c_i_next__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->c_i_next;
}
// [[Rcpp::export]]
void Leaf__c_i_next__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->c_i_next = value;
}

// [[Rcpp::export]]
double Leaf__lambda___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->lambda_;
}
// [[Rcpp::export]]
void Leaf__lambda___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->lambda_ = value;
}

// [[Rcpp::export]]
double Leaf__j___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->j_;
}
// [[Rcpp::export]]
void Leaf__j___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->j_ = value;
}

// [[Rcpp::export]]
double Leaf__k_l_max___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->k_l_max_;
}
// [[Rcpp::export]]
void Leaf__k_l_max___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->k_l_max_ = value;
}

// [[Rcpp::export]]
double Leaf__PPFD___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->PPFD_;
}
// [[Rcpp::export]]
void Leaf__PPFD___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->PPFD_ = value;
}

// [[Rcpp::export]]
double Leaf__atm_vpd___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->atm_vpd_;
}
// [[Rcpp::export]]
void Leaf__atm_vpd___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->atm_vpd_ = value;
}

// [[Rcpp::export]]
double Leaf__psi_soil___get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->psi_soil_;
}
// [[Rcpp::export]]
void Leaf__psi_soil___set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->psi_soil_ = value;
}

// [[Rcpp::export]]
double Leaf__opt_psi_stem__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->opt_psi_stem;
}
// [[Rcpp::export]]
void Leaf__opt_psi_stem__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->opt_psi_stem = value;
}

// [[Rcpp::export]]
double Leaf__opt_ci__get(plant::RcppR6::RcppR6<plant::Leaf> obj_) {
  return obj_->opt_ci;
}
// [[Rcpp::export]]
void Leaf__opt_ci__set(plant::RcppR6::RcppR6<plant::Leaf> obj_, double value) {
  obj_->opt_ci = value;
}


// [[Rcpp::export]]
plant::ode::test::Lorenz Lorenz__ctor(double sigma, double R, double b) {
  return plant::ode::test::Lorenz(sigma, R, b);
}
// [[Rcpp::export]]
size_t Lorenz__ode_size__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Lorenz__ode_state__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Lorenz__ode_state__set(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Lorenz__ode_rates__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<double> Lorenz__pars__get(plant::RcppR6::RcppR6<plant::ode::test::Lorenz> obj_) {
  return obj_->pars();
}


// [[Rcpp::export]]
plant::ode::test::OdeR OdeR__ctor(Rcpp::Function derivs, Rcpp::Function state, double time) {
  return plant::ode::test::OdeR(derivs, state, time);
}
// [[Rcpp::export]]
void OdeR__update_state(plant::RcppR6::RcppR6<plant::ode::test::OdeR> obj_) {
  obj_->update_state();
}

// [[Rcpp::export]]
plant::ode::Runner<plant::ode::test::Lorenz> OdeRunner___Lorenz__ctor(plant::ode::test::Lorenz obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::ode::test::Lorenz>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___Lorenz__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___Lorenz__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___Lorenz__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___Lorenz__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::ode::test::Lorenz OdeRunner___Lorenz__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::Lorenz> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::ode::test::OdeR> OdeRunner___OdeR__ctor(plant::ode::test::OdeR obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::ode::test::OdeR>(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___OdeR__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___OdeR__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___OdeR__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___OdeR__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___OdeR__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::ode::test::OdeR OdeRunner___OdeR__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::ode::test::OdeR> > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > OdeRunner___FF16__ctor(plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___FF16__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___FF16__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___FF16__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___FF16__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___FF16__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___FF16__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> OdeRunner___FF16__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > OdeRunner___FF16w__ctor(plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___FF16w__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16w__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16w__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___FF16w__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16w__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___FF16w__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___FF16w__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___FF16w__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___FF16w__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> OdeRunner___FF16w__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16w_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > OdeRunner___FF16r__ctor(plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___FF16r__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___FF16r__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___FF16r__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___FF16r__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___FF16r__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> OdeRunner___FF16r__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::FF16r_Strategy, plant::FF16_Environment> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > OdeRunner___K93__ctor(plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> obj, plant::ode::OdeControl control) {
  return plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> >(obj, control);
}
// [[Rcpp::export]]
void OdeRunner___K93__advance(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_, double time) {
  obj_->advance(time);
}
// [[Rcpp::export]]
void OdeRunner___K93__advance_fixed(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_, std::vector<double> time) {
  obj_->advance_fixed(time);
}
// [[Rcpp::export]]
void OdeRunner___K93__step(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  obj_->step();
}
// [[Rcpp::export]]
void OdeRunner___K93__step_to(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_, double time) {
  obj_->step_to(time);
}
// [[Rcpp::export]]
void OdeRunner___K93__set_state(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_, plant::ode::state_type y, double time) {
  obj_->set_state(y, time);
}
// [[Rcpp::export]]
void OdeRunner___K93__set_state_from_system(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  obj_->set_state_from_system();
}
// [[Rcpp::export]]
double OdeRunner___K93__time__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::ode::state_type OdeRunner___K93__state__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  return obj_->state();
}

// [[Rcpp::export]]
std::vector<double> OdeRunner___K93__times__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  return obj_->times();
}

// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> OdeRunner___K93__object__get(plant::RcppR6::RcppR6<plant::ode::Runner<plant::tools::IndividualRunner<plant::K93_Strategy, plant::K93_Environment> > > obj_) {
  return obj_->object();
}


// [[Rcpp::export]]
plant::NodeScheduleEvent NodeScheduleEvent__ctor(double introduction, plant::util::index species_index) {
  return plant::NodeScheduleEvent(introduction, species_index);
}
// [[Rcpp::export]]
plant::util::index NodeScheduleEvent__species_index__get(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_) {
  return obj_->species_index;
}
// [[Rcpp::export]]
void NodeScheduleEvent__species_index__set(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_, plant::util::index value) {
  obj_->species_index = value;
}

// [[Rcpp::export]]
std::vector<double> NodeScheduleEvent__times__get(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_) {
  return obj_->times;
}

// [[Rcpp::export]]
double NodeScheduleEvent__time_introduction__get(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_) {
  return obj_->time_introduction();
}

// [[Rcpp::export]]
double NodeScheduleEvent__time_end__get(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_) {
  return obj_->time_end();
}

// [[Rcpp::export]]
size_t NodeScheduleEvent__species_index_raw__get(plant::RcppR6::RcppR6<plant::NodeScheduleEvent> obj_) {
  return obj_->species_index_raw();
}


// [[Rcpp::export]]
plant::NodeSchedule NodeSchedule__ctor(size_t n_species) {
  return plant::NodeSchedule(n_species);
}
// [[Rcpp::export]]
plant::NodeSchedule NodeSchedule__expand(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, size_t n_extra, std::vector<double> times) {
  return obj_->expand(n_extra, times);
}
// [[Rcpp::export]]
void NodeSchedule__clear_times(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, plant::util::index species_index) {
  obj_->clear_times(species_index);
}
// [[Rcpp::export]]
void NodeSchedule__clear_ode_times(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  obj_->r_clear_ode_times();
}
// [[Rcpp::export]]
void NodeSchedule__set_times(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, std::vector<double> times, plant::util::index species_index) {
  obj_->r_set_times(times, species_index);
}
// [[Rcpp::export]]
std::vector<double> NodeSchedule__times(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, plant::util::index species_index) {
  return obj_->r_times(species_index);
}
// [[Rcpp::export]]
void NodeSchedule__reset(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void NodeSchedule__pop(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  obj_->pop();
}
// [[Rcpp::export]]
plant::NodeSchedule NodeSchedule__copy(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->r_copy();
}
// [[Rcpp::export]]
size_t NodeSchedule__size__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t NodeSchedule__n_species__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->get_n_species();
}

// [[Rcpp::export]]
plant::NodeScheduleEvent NodeSchedule__next_event__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->next_event();
}

// [[Rcpp::export]]
size_t NodeSchedule__remaining__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->remaining();
}

// [[Rcpp::export]]
double NodeSchedule__max_time__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->get_max_time();
}
// [[Rcpp::export]]
void NodeSchedule__max_time__set(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, double value) {
  obj_->r_set_max_time(value);
}

// [[Rcpp::export]]
std::vector<double> NodeSchedule__ode_times__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->r_ode_times();
}
// [[Rcpp::export]]
void NodeSchedule__ode_times__set(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, std::vector<double> value) {
  obj_->r_set_ode_times(value);
}

// [[Rcpp::export]]
bool NodeSchedule__use_ode_times__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->using_ode_times();
}
// [[Rcpp::export]]
void NodeSchedule__use_ode_times__set(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
SEXP NodeSchedule__all_times__get(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_) {
  return obj_->r_all_times();
}
// [[Rcpp::export]]
void NodeSchedule__all_times__set(plant::RcppR6::RcppR6<plant::NodeSchedule> obj_, SEXP value) {
  obj_->r_set_all_times(value);
}


// [[Rcpp::export]]
SEXP Control__ctor() {
  return Rcpp::wrap(plant::Control());
}


// [[Rcpp::export]]
SEXP OdeControl__ctor() {
  return Rcpp::wrap(plant::ode::OdeControl());
}


// [[Rcpp::export]]
plant::quadrature::QK QK__ctor(size_t rule) {
  return plant::quadrature::QK(rule);
}
// [[Rcpp::export]]
double QK__integrate(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
std::vector<double> QK__integrate_vector_x(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, double a, double b) {
  return obj_->integrate_vector_x(a, b);
}
// [[Rcpp::export]]
double QK__integrate_vector(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_, std::vector<double> y, double a, double b) {
  return obj_->integrate_vector(y, a, b);
}
// [[Rcpp::export]]
double QK__last_area__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QK__last_error__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
double QK__last_area_abs__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area_abs();
}

// [[Rcpp::export]]
double QK__last_area_asc__get(plant::RcppR6::RcppR6<plant::quadrature::QK> obj_) {
  return obj_->get_last_area_asc();
}


// [[Rcpp::export]]
plant::quadrature::QAG QAG__ctor(size_t rule, size_t max_iterations, double atol, double rtol) {
  return plant::quadrature::QAG(rule, max_iterations, atol, rtol);
}
// [[Rcpp::export]]
double QAG__integrate(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate(f, a, b);
}
// [[Rcpp::export]]
double QAG__integrate_with_intervals(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, SEXP intervals) {
  return obj_->r_integrate_with_intervals(f, intervals);
}
// [[Rcpp::export]]
double QAG__integrate_with_last_intervals(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_, SEXP f, double a, double b) {
  return obj_->r_integrate_with_last_intervals(f, a, b);
}
// [[Rcpp::export]]
double QAG__last_area__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_area();
}

// [[Rcpp::export]]
double QAG__last_error__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_error();
}

// [[Rcpp::export]]
size_t QAG__last_iterations__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_iterations();
}

// [[Rcpp::export]]
plant::quadrature::intervals_type QAG__last_intervals__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->get_last_intervals();
}

// [[Rcpp::export]]
bool QAG__is_adaptive__get(plant::RcppR6::RcppR6<plant::quadrature::QAG> obj_) {
  return obj_->is_adaptive();
}


// [[Rcpp::export]]
plant::interpolator::Interpolator Interpolator__ctor() {
  return plant::interpolator::Interpolator();
}
// [[Rcpp::export]]
void Interpolator__init(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_, const std::vector<double>& x, const std::vector<double>& y) {
  obj_->init(x, y);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__eval(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_, std::vector<double> x) {
  return obj_->r_eval(x);
}
// [[Rcpp::export]]
void Interpolator__set_extrapolate(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_, bool e) {
  obj_->set_extrapolate(e);
}
// [[Rcpp::export]]
std::vector<double> Interpolator__x__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->get_x();
}

// [[Rcpp::export]]
std::vector<double> Interpolator__y__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->get_y();
}

// [[Rcpp::export]]
SEXP Interpolator__xy__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->r_get_xy();
}

// [[Rcpp::export]]
size_t Interpolator__size__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Interpolator__min__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->min();
}

// [[Rcpp::export]]
double Interpolator__max__get(plant::RcppR6::RcppR6<plant::interpolator::Interpolator> obj_) {
  return obj_->max();
}


// [[Rcpp::export]]
plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> Individual___FF16__FF16_Env__ctor(plant::FF16_Strategy s) {
  return plant::make_individual<plant::FF16_Strategy,plant::FF16_Environment>(s);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->state(name);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__rate(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->rate(name);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__aux(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->aux(name);
}
// [[Rcpp::export]]
void Individual___FF16__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::string name, double v) {
  obj_->set_state(name, v);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double h) {
  return obj_->compute_competition(h);
}
// [[Rcpp::export]]
void Individual___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__net_mass_production_dt(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->net_mass_production_dt(environment);
}
// [[Rcpp::export]]
void Individual___FF16__FF16_Env__reset_mortality(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Individual___FF16__FF16_Env__resource_compensation_point(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->resource_compensation_point();
}
// [[Rcpp::export]]
plant::FF16_Strategy Individual___FF16__FF16_Env__strategy__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Internals Individual___FF16__FF16_Env__internals__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Individual___FF16__FF16_Env__aux_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_size();
}

// [[Rcpp::export]]
size_t Individual___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16__FF16_Env__aux_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_names();
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Individual___FF16__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
double Individual___FF16__FF16_Env__mortality_probability__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Individual___FF16__FF16_Env__strategy_name__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> Individual___FF16w__FF16_Env__ctor(plant::FF16w_Strategy s) {
  return plant::make_individual<plant::FF16w_Strategy,plant::FF16_Environment>(s);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->state(name);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__rate(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->rate(name);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__aux(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->aux(name);
}
// [[Rcpp::export]]
void Individual___FF16w__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::string name, double v) {
  obj_->set_state(name, v);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double h) {
  return obj_->compute_competition(h);
}
// [[Rcpp::export]]
void Individual___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__net_mass_production_dt(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->net_mass_production_dt(environment);
}
// [[Rcpp::export]]
void Individual___FF16w__FF16_Env__reset_mortality(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__resource_compensation_point(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->resource_compensation_point();
}
// [[Rcpp::export]]
plant::FF16w_Strategy Individual___FF16w__FF16_Env__strategy__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Internals Individual___FF16w__FF16_Env__internals__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Individual___FF16w__FF16_Env__aux_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_size();
}

// [[Rcpp::export]]
size_t Individual___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16w__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16w__FF16_Env__aux_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_names();
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Individual___FF16w__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
double Individual___FF16w__FF16_Env__mortality_probability__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Individual___FF16w__FF16_Env__strategy_name__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> Individual___FF16r__FF16_Env__ctor(plant::FF16r_Strategy s) {
  return plant::make_individual<plant::FF16r_Strategy,plant::FF16_Environment>(s);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->state(name);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__rate(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->rate(name);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__aux(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::string name) {
  return obj_->aux(name);
}
// [[Rcpp::export]]
void Individual___FF16r__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::string name, double v) {
  obj_->set_state(name, v);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double h) {
  return obj_->compute_competition(h);
}
// [[Rcpp::export]]
void Individual___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__net_mass_production_dt(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->net_mass_production_dt(environment);
}
// [[Rcpp::export]]
void Individual___FF16r__FF16_Env__reset_mortality(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__resource_compensation_point(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->resource_compensation_point();
}
// [[Rcpp::export]]
plant::FF16r_Strategy Individual___FF16r__FF16_Env__strategy__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Internals Individual___FF16r__FF16_Env__internals__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Individual___FF16r__FF16_Env__aux_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_size();
}

// [[Rcpp::export]]
size_t Individual___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16r__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___FF16r__FF16_Env__aux_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->aux_names();
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Individual___FF16r__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Individual___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
double Individual___FF16r__FF16_Env__mortality_probability__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Individual___FF16r__FF16_Env__strategy_name__get(plant::RcppR6::RcppR6<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::Individual<plant::K93_Strategy,plant::K93_Environment> Individual___K93__K93_Env__ctor(plant::K93_Strategy s) {
  return plant::make_individual<plant::K93_Strategy,plant::K93_Environment>(s);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__state(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, std::string name) {
  return obj_->state(name);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__rate(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, std::string name) {
  return obj_->rate(name);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__aux(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, std::string name) {
  return obj_->aux(name);
}
// [[Rcpp::export]]
void Individual___K93__K93_Env__set_state(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, std::string name, double v) {
  obj_->set_state(name, v);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, double h) {
  return obj_->compute_competition(h);
}
// [[Rcpp::export]]
void Individual___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__establishment_probability(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__net_mass_production_dt(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  return obj_->net_mass_production_dt(environment);
}
// [[Rcpp::export]]
void Individual___K93__K93_Env__reset_mortality(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->reset_mortality();
}
// [[Rcpp::export]]
double Individual___K93__K93_Env__resource_compensation_point(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->resource_compensation_point();
}
// [[Rcpp::export]]
plant::K93_Strategy Individual___K93__K93_Env__strategy__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_get_strategy();
}

// [[Rcpp::export]]
plant::Internals Individual___K93__K93_Env__internals__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
size_t Individual___K93__K93_Env__aux_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->aux_size();
}

// [[Rcpp::export]]
size_t Individual___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___K93__K93_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_names();
}

// [[Rcpp::export]]
std::vector<std::string> Individual___K93__K93_Env__aux_names__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->aux_names();
}

// [[Rcpp::export]]
plant::ode::state_type Individual___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Individual___K93__K93_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Individual___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
double Individual___K93__K93_Env__mortality_probability__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->mortality_probability();
}

// [[Rcpp::export]]
std::string Individual___K93__K93_Env__strategy_name__get(plant::RcppR6::RcppR6<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->strategy_name();
}


// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16_Strategy,plant::FF16_Environment> IndividualRunner___FF16__FF16_Env__ctor(plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> individual, plant::FF16_Environment environment) {
  return plant::tools::IndividualRunner<plant::FF16_Strategy,plant::FF16_Environment>(individual, environment);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> IndividualRunner___FF16__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}
// [[Rcpp::export]]
void IndividualRunner___FF16__FF16_Env__individual__set(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> value) {
  obj_->individual = value;
}


// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16w_Strategy,plant::FF16_Environment> IndividualRunner___FF16w__FF16_Env__ctor(plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> individual, plant::FF16_Environment environment) {
  return plant::tools::IndividualRunner<plant::FF16w_Strategy,plant::FF16_Environment>(individual, environment);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> IndividualRunner___FF16w__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}
// [[Rcpp::export]]
void IndividualRunner___FF16w__FF16_Env__individual__set(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> value) {
  obj_->individual = value;
}


// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::FF16r_Strategy,plant::FF16_Environment> IndividualRunner___FF16r__FF16_Env__ctor(plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> individual, plant::FF16_Environment environment) {
  return plant::tools::IndividualRunner<plant::FF16r_Strategy,plant::FF16_Environment>(individual, environment);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> IndividualRunner___FF16r__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}
// [[Rcpp::export]]
void IndividualRunner___FF16r__FF16_Env__individual__set(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> value) {
  obj_->individual = value;
}


// [[Rcpp::export]]
plant::tools::IndividualRunner<plant::K93_Strategy,plant::K93_Environment> IndividualRunner___K93__K93_Env__ctor(plant::Individual<plant::K93_Strategy,plant::K93_Environment> individual, plant::K93_Environment environment) {
  return plant::tools::IndividualRunner<plant::K93_Strategy,plant::K93_Environment>(individual, environment);
}
// [[Rcpp::export]]
plant::Individual<plant::K93_Strategy,plant::K93_Environment> IndividualRunner___K93__K93_Env__individual__get(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->individual;
}
// [[Rcpp::export]]
void IndividualRunner___K93__K93_Env__individual__set(plant::RcppR6::RcppR6<plant::tools::IndividualRunner<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::Individual<plant::K93_Strategy,plant::K93_Environment> value) {
  obj_->individual = value;
}


// [[Rcpp::export]]
plant::Internals Internals__ctor(size_t s_size, size_t a_size) {
  return plant::Internals(s_size, a_size);
}
// [[Rcpp::export]]
double Internals__state(plant::RcppR6::RcppR6<plant::Internals> obj_, int i) {
  return obj_->state(i);
}
// [[Rcpp::export]]
double Internals__rate(plant::RcppR6::RcppR6<plant::Internals> obj_, int i) {
  return obj_->rate(i);
}
// [[Rcpp::export]]
double Internals__aux(plant::RcppR6::RcppR6<plant::Internals> obj_, int i) {
  return obj_->aux(i);
}
// [[Rcpp::export]]
void Internals__set_aux(plant::RcppR6::RcppR6<plant::Internals> obj_, int i, double v) {
  obj_->set_aux(i, v);
}
// [[Rcpp::export]]
void Internals__set_state(plant::RcppR6::RcppR6<plant::Internals> obj_, int i, double v) {
  obj_->set_state(i, v);
}
// [[Rcpp::export]]
void Internals__set_rate(plant::RcppR6::RcppR6<plant::Internals> obj_, int i, double v) {
  obj_->set_rate(i, v);
}
// [[Rcpp::export]]
void Internals__resize(plant::RcppR6::RcppR6<plant::Internals> obj_, size_t new_size, size_t new_aux_size) {
  obj_->resize(new_size, new_aux_size);
}
// [[Rcpp::export]]
size_t Internals__state_size__get(plant::RcppR6::RcppR6<plant::Internals> obj_) {
  return obj_->state_size;
}
// [[Rcpp::export]]
void Internals__state_size__set(plant::RcppR6::RcppR6<plant::Internals> obj_, size_t value) {
  obj_->state_size = value;
}

// [[Rcpp::export]]
size_t Internals__aux_size__get(plant::RcppR6::RcppR6<plant::Internals> obj_) {
  return obj_->aux_size;
}
// [[Rcpp::export]]
void Internals__aux_size__set(plant::RcppR6::RcppR6<plant::Internals> obj_, size_t value) {
  obj_->aux_size = value;
}

// [[Rcpp::export]]
std::vector<double> Internals__states__get(plant::RcppR6::RcppR6<plant::Internals> obj_) {
  return obj_->states;
}
// [[Rcpp::export]]
void Internals__states__set(plant::RcppR6::RcppR6<plant::Internals> obj_, std::vector<double> value) {
  obj_->states = value;
}

// [[Rcpp::export]]
std::vector<double> Internals__rates__get(plant::RcppR6::RcppR6<plant::Internals> obj_) {
  return obj_->rates;
}
// [[Rcpp::export]]
void Internals__rates__set(plant::RcppR6::RcppR6<plant::Internals> obj_, std::vector<double> value) {
  obj_->rates = value;
}

// [[Rcpp::export]]
std::vector<double> Internals__auxs__get(plant::RcppR6::RcppR6<plant::Internals> obj_) {
  return obj_->auxs;
}
// [[Rcpp::export]]
void Internals__auxs__set(plant::RcppR6::RcppR6<plant::Internals> obj_, std::vector<double> value) {
  obj_->auxs = value;
}


// [[Rcpp::export]]
SEXP Parameters___FF16__FF16_Env__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment>());
}
// [[Rcpp::export]]
SEXP Parameters___FF16__FF16_Env__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> >(obj));
}


// [[Rcpp::export]]
SEXP Parameters___FF16w__FF16_Env__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment>());
}
// [[Rcpp::export]]
SEXP Parameters___FF16w__FF16_Env__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> >(obj));
}


// [[Rcpp::export]]
SEXP Parameters___FF16r__FF16_Env__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment>());
}
// [[Rcpp::export]]
SEXP Parameters___FF16r__FF16_Env__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> >(obj));
}


// [[Rcpp::export]]
SEXP Parameters___K93__K93_Env__ctor() {
  return Rcpp::wrap(plant::Parameters<plant::K93_Strategy,plant::K93_Environment>());
}
// [[Rcpp::export]]
SEXP Parameters___K93__K93_Env__vdor(SEXP obj) {
  return Rcpp::wrap(Rcpp::as<plant::Parameters<plant::K93_Strategy,plant::K93_Environment> >(obj));
}


// [[Rcpp::export]]
plant::Node<plant::FF16_Strategy,plant::FF16_Environment> Node___FF16__FF16_Env__ctor(plant::FF16_Strategy strategy) {
  return plant::make_node<plant::FF16_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
double Node___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Node___FF16__FF16_Env__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Node___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival) {
  obj_->compute_rates(environment, pr_patch_survival);
}
// [[Rcpp::export]]
void Node___FF16__FF16_Env__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_initial_conditions(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> Node___FF16__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}

// [[Rcpp::export]]
double Node___FF16__FF16_Env__height__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Node___FF16__FF16_Env__log_density__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Node___FF16__FF16_Env__competition_effect__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->competition_effect();
}

// [[Rcpp::export]]
double Node___FF16__FF16_Env__fecundity__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Node___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Node___FF16__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Node___FF16__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> Node___FF16w__FF16_Env__ctor(plant::FF16w_Strategy strategy) {
  return plant::make_node<plant::FF16w_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
double Node___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Node___FF16w__FF16_Env__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Node___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival) {
  obj_->compute_rates(environment, pr_patch_survival);
}
// [[Rcpp::export]]
void Node___FF16w__FF16_Env__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_initial_conditions(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> Node___FF16w__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}

// [[Rcpp::export]]
double Node___FF16w__FF16_Env__height__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Node___FF16w__FF16_Env__log_density__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Node___FF16w__FF16_Env__competition_effect__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->competition_effect();
}

// [[Rcpp::export]]
double Node___FF16w__FF16_Env__fecundity__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Node___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Node___FF16w__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Node___FF16w__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> Node___FF16r__FF16_Env__ctor(plant::FF16r_Strategy strategy) {
  return plant::make_node<plant::FF16r_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
double Node___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Node___FF16r__FF16_Env__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Node___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival) {
  obj_->compute_rates(environment, pr_patch_survival);
}
// [[Rcpp::export]]
void Node___FF16r__FF16_Env__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_initial_conditions(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> Node___FF16r__FF16_Env__individual__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->individual;
}

// [[Rcpp::export]]
double Node___FF16r__FF16_Env__height__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Node___FF16r__FF16_Env__log_density__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Node___FF16r__FF16_Env__competition_effect__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->competition_effect();
}

// [[Rcpp::export]]
double Node___FF16r__FF16_Env__fecundity__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Node___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Node___FF16r__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Node___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Node___FF16r__FF16_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Node<plant::K93_Strategy,plant::K93_Environment> Node___K93__K93_Env__ctor(plant::K93_Strategy strategy) {
  return plant::make_node<plant::K93_Strategy,plant::K93_Environment>(strategy);
}
// [[Rcpp::export]]
double Node___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Node___K93__K93_Env__growth_rate_gradient(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  return obj_->r_growth_rate_gradient(environment);
}
// [[Rcpp::export]]
void Node___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment, double pr_patch_survival) {
  obj_->compute_rates(environment, pr_patch_survival);
}
// [[Rcpp::export]]
void Node___K93__K93_Env__compute_initial_conditions(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_initial_conditions(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
plant::Individual<plant::K93_Strategy,plant::K93_Environment> Node___K93__K93_Env__individual__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->individual;
}

// [[Rcpp::export]]
double Node___K93__K93_Env__height__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->height();
}

// [[Rcpp::export]]
double Node___K93__K93_Env__log_density__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->get_log_density();
}

// [[Rcpp::export]]
double Node___K93__K93_Env__competition_effect__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->competition_effect();
}

// [[Rcpp::export]]
double Node___K93__K93_Env__fecundity__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->fecundity();
}

// [[Rcpp::export]]
size_t Node___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Node___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Node___K93__K93_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Node___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
std::vector<std::string> Node___K93__K93_Env__ode_names__get(plant::RcppR6::RcppR6<plant::Node<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_names();
}


// [[Rcpp::export]]
plant::Species<plant::FF16_Strategy,plant::FF16_Environment> Species___FF16__FF16_Env__ctor(plant::FF16_Strategy strategy) {
  return plant::Species<plant::FF16_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void Species___FF16__FF16_Env__clear(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_rates(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
double Species___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void Species___FF16__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Node<plant::FF16_Strategy,plant::FF16_Environment> Species___FF16__FF16_Env__node_at(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_node_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___FF16__FF16_Env__competition_effects_error(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double scal) {
  return obj_->r_competition_effects_error(scal);
}
// [[Rcpp::export]]
size_t Species___FF16__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Node<plant::FF16_Strategy,plant::FF16_Environment> Species___FF16__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double Species___FF16__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___FF16__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__FF16_Env__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Node<plant::FF16_Strategy,plant::FF16_Environment> > Species___FF16__FF16_Env__nodes__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_nodes();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16__FF16_Env__competition_effects__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_competition_effects();
}

// [[Rcpp::export]]
plant::ExtrinsicDrivers Species___FF16__FF16_Env__extrinsic_drivers__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->extrinsic_drivers();
}

// [[Rcpp::export]]
size_t Species___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___FF16__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> Species___FF16w__FF16_Env__ctor(plant::FF16w_Strategy strategy) {
  return plant::Species<plant::FF16w_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void Species___FF16w__FF16_Env__clear(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_rates(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
double Species___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void Species___FF16w__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> Species___FF16w__FF16_Env__node_at(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_node_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___FF16w__FF16_Env__competition_effects_error(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double scal) {
  return obj_->r_competition_effects_error(scal);
}
// [[Rcpp::export]]
size_t Species___FF16w__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> Species___FF16w__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double Species___FF16w__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16w__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___FF16w__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___FF16w__FF16_Env__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Node<plant::FF16w_Strategy,plant::FF16_Environment> > Species___FF16w__FF16_Env__nodes__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_nodes();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16w__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16w__FF16_Env__competition_effects__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_competition_effects();
}

// [[Rcpp::export]]
plant::ExtrinsicDrivers Species___FF16w__FF16_Env__extrinsic_drivers__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->extrinsic_drivers();
}

// [[Rcpp::export]]
size_t Species___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___FF16w__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> Species___FF16r__FF16_Env__ctor(plant::FF16r_Strategy strategy) {
  return plant::Species<plant::FF16r_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void Species___FF16r__FF16_Env__clear(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_rates(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
double Species___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void Species___FF16r__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> Species___FF16r__FF16_Env__node_at(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_node_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___FF16r__FF16_Env__competition_effects_error(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double scal) {
  return obj_->r_competition_effects_error(scal);
}
// [[Rcpp::export]]
size_t Species___FF16r__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> Species___FF16r__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double Species___FF16r__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___FF16r__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__FF16_Env__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Node<plant::FF16r_Strategy,plant::FF16_Environment> > Species___FF16r__FF16_Env__nodes__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_nodes();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
std::vector<double> Species___FF16r__FF16_Env__competition_effects__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_competition_effects();
}

// [[Rcpp::export]]
plant::ExtrinsicDrivers Species___FF16r__FF16_Env__extrinsic_drivers__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->extrinsic_drivers();
}

// [[Rcpp::export]]
size_t Species___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___FF16r__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Species<plant::K93_Strategy,plant::K93_Environment> Species___K93__K93_Env__ctor(plant::K93_Strategy strategy) {
  return plant::Species<plant::K93_Strategy,plant::K93_Environment>(strategy);
}
// [[Rcpp::export]]
void Species___K93__K93_Env__clear(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void Species___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment, double pr_patch_survival, double birth_rate) {
  obj_->compute_rates(environment, pr_patch_survival, birth_rate);
}
// [[Rcpp::export]]
double Species___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void Species___K93__K93_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Node<plant::K93_Strategy,plant::K93_Environment> Species___K93__K93_Env__node_at(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index index) {
  return obj_->r_node_at(index);
}
// [[Rcpp::export]]
std::vector<double> Species___K93__K93_Env__competition_effects_error(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, double scal) {
  return obj_->r_competition_effects_error(scal);
}
// [[Rcpp::export]]
size_t Species___K93__K93_Env__size__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
plant::Node<plant::K93_Strategy,plant::K93_Environment> Species___K93__K93_Env__new_node__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double Species___K93__K93_Env__height_max__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> Species___K93__K93_Env__heights__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void Species___K93__K93_Env__heights__set(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<double> Species___K93__K93_Env__log_densities__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_log_densities();
}

// [[Rcpp::export]]
std::vector<plant::Node<plant::K93_Strategy,plant::K93_Environment> > Species___K93__K93_Env__nodes__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_nodes();
}

// [[Rcpp::export]]
std::vector<double> Species___K93__K93_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
std::vector<double> Species___K93__K93_Env__competition_effects__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_competition_effects();
}

// [[Rcpp::export]]
plant::ExtrinsicDrivers Species___K93__K93_Env__extrinsic_drivers__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->extrinsic_drivers();
}

// [[Rcpp::export]]
size_t Species___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type Species___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void Species___K93__K93_Env__ode_state__set(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type Species___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Species<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> Patch___FF16__FF16_Env__ctor(plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::Patch<plant::FF16_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__reset(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__set_time(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double time) {
  obj_->r_set_time(time);
}
// [[Rcpp::export]]
void Patch___FF16__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& env) {
  obj_->r_set_state(time, state, n, env);
}
// [[Rcpp::export]]
std::vector<double> Patch___FF16__FF16_Env__density(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__pr_survival(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_pr_survival(time);
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__disturbance_mean_interval(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_disturbance_mean_interval();
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__survival_weighting_cdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_survival_weighting_cdf(time);
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__survival_weighting_icdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double prob) {
  return obj_->r_survival_weighting_icdf(prob);
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Patch___FF16__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___FF16__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___FF16__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> Patch___FF16__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment Patch___FF16__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::FF16_Strategy,plant::FF16_Environment> > Patch___FF16__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___FF16__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16__FF16_Env__ode_aux__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_aux(*obj_);
}

// [[Rcpp::export]]
size_t Patch___FF16__FF16_Env__node_ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->node_ode_size();
}


// [[Rcpp::export]]
plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> Patch___FF16w__FF16_Env__ctor(plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__reset(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___FF16w__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__set_time(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double time) {
  obj_->r_set_time(time);
}
// [[Rcpp::export]]
void Patch___FF16w__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& env) {
  obj_->r_set_state(time, state, n, env);
}
// [[Rcpp::export]]
std::vector<double> Patch___FF16w__FF16_Env__density(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__pr_survival(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_pr_survival(time);
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__disturbance_mean_interval(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_disturbance_mean_interval();
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__survival_weighting_cdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_survival_weighting_cdf(time);
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__survival_weighting_icdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double prob) {
  return obj_->r_survival_weighting_icdf(prob);
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___FF16w__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> Patch___FF16w__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment Patch___FF16w__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::FF16w_Strategy,plant::FF16_Environment> > Patch___FF16w__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___FF16w__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16w__FF16_Env__ode_aux__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_aux(*obj_);
}

// [[Rcpp::export]]
size_t Patch___FF16w__FF16_Env__node_ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->node_ode_size();
}


// [[Rcpp::export]]
plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> Patch___FF16r__FF16_Env__ctor(plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__reset(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__set_time(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double time) {
  obj_->r_set_time(time);
}
// [[Rcpp::export]]
void Patch___FF16r__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& env) {
  obj_->r_set_state(time, state, n, env);
}
// [[Rcpp::export]]
std::vector<double> Patch___FF16r__FF16_Env__density(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__pr_survival(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_pr_survival(time);
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__disturbance_mean_interval(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_disturbance_mean_interval();
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__survival_weighting_cdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double time) {
  return obj_->r_survival_weighting_cdf(time);
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__survival_weighting_icdf(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double prob) {
  return obj_->r_survival_weighting_icdf(prob);
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___FF16r__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> Patch___FF16r__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment Patch___FF16r__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::FF16r_Strategy,plant::FF16_Environment> > Patch___FF16r__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___FF16r__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___FF16r__FF16_Env__ode_aux__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_aux(*obj_);
}

// [[Rcpp::export]]
size_t Patch___FF16r__FF16_Env__node_ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->node_ode_size();
}


// [[Rcpp::export]]
plant::Patch<plant::K93_Strategy,plant::K93_Environment> Patch___K93__K93_Env__ctor(plant::Parameters<plant::K93_Strategy,plant::K93_Environment> parameters, plant::K93_Environment environment, plant::Control control) {
  return plant::Patch<plant::K93_Strategy,plant::K93_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__compute_environment(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__reset(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__set_ode_state(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type Patch___K93__K93_Env__derivs(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__set_time(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double time) {
  obj_->r_set_time(time);
}
// [[Rcpp::export]]
void Patch___K93__K93_Env__set_state(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n, const std::vector<double>& env) {
  obj_->r_set_state(time, state, n, env);
}
// [[Rcpp::export]]
std::vector<double> Patch___K93__K93_Env__density(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__pr_survival(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double time) {
  return obj_->r_pr_survival(time);
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__disturbance_mean_interval(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_disturbance_mean_interval();
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__survival_weighting_cdf(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double time) {
  return obj_->r_survival_weighting_cdf(time);
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__survival_weighting_icdf(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double prob) {
  return obj_->r_survival_weighting_icdf(prob);
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
double Patch___K93__K93_Env__time__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t Patch___K93__K93_Env__size__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double Patch___K93__K93_Env__height_max__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::K93_Strategy,plant::K93_Environment> Patch___K93__K93_Env__parameters__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::K93_Environment Patch___K93__K93_Env__environment__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::Species<plant::K93_Strategy,plant::K93_Environment> > Patch___K93__K93_Env__species__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t Patch___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double Patch___K93__K93_Env__ode_time__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type Patch___K93__K93_Env__ode_aux__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_aux(*obj_);
}

// [[Rcpp::export]]
size_t Patch___K93__K93_Env__node_ode_size__get(plant::RcppR6::RcppR6<plant::Patch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->node_ode_size();
}


// [[Rcpp::export]]
plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> SCM___FF16__FF16_Env__ctor(plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::SCM<plant::FF16_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void SCM___FF16__FF16_Env__run(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___FF16__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___FF16__FF16_Env__reset(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___FF16__FF16_Env__net_reproduction_ratio_for_species(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_net_reproduction_ratio_for_species(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16__FF16_Env__competition_effect_error(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_competition_effect_error(species_index);
}
// [[Rcpp::export]]
void SCM___FF16__FF16_Env__set_node_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_node_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___FF16__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___FF16__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16__FF16_Env__net_reproduction_ratios__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratios();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16__FF16_Env__offspring_production__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->offspring_production();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> SCM___FF16__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::FF16_Strategy,plant::FF16_Environment> SCM___FF16__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule SCM___FF16__FF16_Env__node_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_node_schedule();
}
// [[Rcpp::export]]
void SCM___FF16__FF16_Env__node_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_node_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16__FF16_Env__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16__FF16_Env__aux__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_aux(*obj_);
}

// [[Rcpp::export]]
bool SCM___FF16__FF16_Env__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___FF16__FF16_Env__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___FF16__FF16_Env__net_reproduction_ratio_errors__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_net_reproduction_ratio_errors();
}


// [[Rcpp::export]]
plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> SCM___FF16w__FF16_Env__ctor(plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void SCM___FF16w__FF16_Env__run(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___FF16w__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___FF16w__FF16_Env__reset(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___FF16w__FF16_Env__net_reproduction_ratio_for_species(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_net_reproduction_ratio_for_species(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16w__FF16_Env__competition_effect_error(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_competition_effect_error(species_index);
}
// [[Rcpp::export]]
void SCM___FF16w__FF16_Env__set_node_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_node_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___FF16w__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___FF16w__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16w__FF16_Env__net_reproduction_ratios__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratios();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16w__FF16_Env__offspring_production__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->offspring_production();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> SCM___FF16w__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::FF16w_Strategy,plant::FF16_Environment> SCM___FF16w__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule SCM___FF16w__FF16_Env__node_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_node_schedule();
}
// [[Rcpp::export]]
void SCM___FF16w__FF16_Env__node_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_node_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16w__FF16_Env__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16w__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16w__FF16_Env__aux__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_aux(*obj_);
}

// [[Rcpp::export]]
bool SCM___FF16w__FF16_Env__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___FF16w__FF16_Env__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___FF16w__FF16_Env__net_reproduction_ratio_errors__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_net_reproduction_ratio_errors();
}


// [[Rcpp::export]]
plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> SCM___FF16r__FF16_Env__ctor(plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void SCM___FF16r__FF16_Env__run(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___FF16r__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___FF16r__FF16_Env__reset(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___FF16r__FF16_Env__net_reproduction_ratio_for_species(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_net_reproduction_ratio_for_species(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___FF16r__FF16_Env__competition_effect_error(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_competition_effect_error(species_index);
}
// [[Rcpp::export]]
void SCM___FF16r__FF16_Env__set_node_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_node_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___FF16r__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___FF16r__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16r__FF16_Env__net_reproduction_ratios__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratios();
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16r__FF16_Env__offspring_production__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->offspring_production();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> SCM___FF16r__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::FF16r_Strategy,plant::FF16_Environment> SCM___FF16r__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule SCM___FF16r__FF16_Env__node_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_node_schedule();
}
// [[Rcpp::export]]
void SCM___FF16r__FF16_Env__node_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_node_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___FF16r__FF16_Env__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16r__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
Rcpp::List SCM___FF16r__FF16_Env__aux__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_aux(*obj_);
}

// [[Rcpp::export]]
bool SCM___FF16r__FF16_Env__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___FF16r__FF16_Env__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___FF16r__FF16_Env__net_reproduction_ratio_errors__get(plant::RcppR6::RcppR6<plant::SCM<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_net_reproduction_ratio_errors();
}


// [[Rcpp::export]]
plant::SCM<plant::K93_Strategy,plant::K93_Environment> SCM___K93__K93_Env__ctor(plant::Parameters<plant::K93_Strategy,plant::K93_Environment> parameters, plant::K93_Environment environment, plant::Control control) {
  return plant::SCM<plant::K93_Strategy,plant::K93_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void SCM___K93__K93_Env__run(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
std::vector<plant::util::index> SCM___K93__K93_Env__run_next(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void SCM___K93__K93_Env__reset(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
double SCM___K93__K93_Env__net_reproduction_ratio_for_species(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_net_reproduction_ratio_for_species(species_index);
}
// [[Rcpp::export]]
std::vector<double> SCM___K93__K93_Env__competition_effect_error(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_competition_effect_error(species_index);
}
// [[Rcpp::export]]
void SCM___K93__K93_Env__set_node_schedule_times(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_node_schedule_times(times);
}
// [[Rcpp::export]]
bool SCM___K93__K93_Env__complete__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double SCM___K93__K93_Env__time__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
std::vector<double> SCM___K93__K93_Env__net_reproduction_ratios__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->net_reproduction_ratios();
}

// [[Rcpp::export]]
std::vector<double> SCM___K93__K93_Env__offspring_production__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->offspring_production();
}

// [[Rcpp::export]]
plant::Parameters<plant::K93_Strategy,plant::K93_Environment> SCM___K93__K93_Env__parameters__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::Patch<plant::K93_Strategy,plant::K93_Environment> SCM___K93__K93_Env__patch__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule SCM___K93__K93_Env__node_schedule__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_node_schedule();
}
// [[Rcpp::export]]
void SCM___K93__K93_Env__node_schedule__set(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_node_schedule(value);
}

// [[Rcpp::export]]
std::vector<double> SCM___K93__K93_Env__ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_ode_times();
}

// [[Rcpp::export]]
Rcpp::List SCM___K93__K93_Env__state__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::get_state(*obj_);
}

// [[Rcpp::export]]
Rcpp::List SCM___K93__K93_Env__aux__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::get_aux(*obj_);
}

// [[Rcpp::export]]
bool SCM___K93__K93_Env__use_ode_times__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_use_ode_times();
}
// [[Rcpp::export]]
void SCM___K93__K93_Env__use_ode_times__set(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_, bool value) {
  obj_->r_set_use_ode_times(value);
}

// [[Rcpp::export]]
std::vector<std::vector<double> > SCM___K93__K93_Env__net_reproduction_ratio_errors__get(plant::RcppR6::RcppR6<plant::SCM<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_net_reproduction_ratio_errors();
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> StochasticSpecies___FF16__FF16_Env__ctor(plant::FF16_Strategy strategy) {
  return plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__FF16_Env__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> StochasticSpecies___FF16__FF16_Env__individual_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_individual_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___FF16__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16__FF16_Env__size_individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size_individuals();
}

// [[Rcpp::export]]
plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> StochasticSpecies___FF16__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double StochasticSpecies___FF16__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Individual<plant::FF16_Strategy,plant::FF16_Environment> > StochasticSpecies___FF16__FF16_Env__individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_individuals();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___FF16__FF16_Env__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> StochasticSpecies___FF16w__FF16_Env__ctor(plant::FF16w_Strategy strategy) {
  return plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16w__FF16_Env__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16w__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> StochasticSpecies___FF16w__FF16_Env__individual_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_individual_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16w__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___FF16w__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16w__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16w__FF16_Env__size_individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size_individuals();
}

// [[Rcpp::export]]
plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> StochasticSpecies___FF16w__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double StochasticSpecies___FF16w__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16w__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16w__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Individual<plant::FF16w_Strategy,plant::FF16_Environment> > StochasticSpecies___FF16w__FF16_Env__individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_individuals();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___FF16w__FF16_Env__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16w__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16w__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> StochasticSpecies___FF16r__FF16_Env__ctor(plant::FF16r_Strategy strategy) {
  return plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__FF16_Env__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> StochasticSpecies___FF16r__FF16_Env__individual_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index index) {
  return obj_->r_individual_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___FF16r__FF16_Env__establishment_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::FF16_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__FF16_Env__size_individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size_individuals();
}

// [[Rcpp::export]]
plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> StochasticSpecies___FF16r__FF16_Env__new_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double StochasticSpecies___FF16r__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16r__FF16_Env__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__FF16_Env__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Individual<plant::FF16r_Strategy,plant::FF16_Environment> > StochasticSpecies___FF16r__FF16_Env__individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_individuals();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___FF16r__FF16_Env__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___FF16r__FF16_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
size_t StochasticSpecies___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___FF16r__FF16_Env__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> StochasticSpecies___K93__K93_Env__ctor(plant::K93_Strategy strategy) {
  return plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment>(strategy);
}
// [[Rcpp::export]]
void StochasticSpecies___K93__K93_Env__clear(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void StochasticSpecies___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  obj_->compute_rates(environment);
}
// [[Rcpp::export]]
double StochasticSpecies___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
void StochasticSpecies___K93__K93_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->introduce_new_node();
}
// [[Rcpp::export]]
plant::Individual<plant::K93_Strategy,plant::K93_Environment> StochasticSpecies___K93__K93_Env__individual_at(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index index) {
  return obj_->r_individual_at(index);
}
// [[Rcpp::export]]
size_t StochasticSpecies___K93__K93_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticSpecies___K93__K93_Env__establishment_probability(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::K93_Environment environment) {
  return obj_->establishment_probability(environment);
}
// [[Rcpp::export]]
size_t StochasticSpecies___K93__K93_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
size_t StochasticSpecies___K93__K93_Env__size_individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->size_individuals();
}

// [[Rcpp::export]]
plant::Individual<plant::K93_Strategy,plant::K93_Environment> StochasticSpecies___K93__K93_Env__new_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_new_node();
}

// [[Rcpp::export]]
double StochasticSpecies___K93__K93_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___K93__K93_Env__heights__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_heights();
}
// [[Rcpp::export]]
void StochasticSpecies___K93__K93_Env__heights__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, std::vector<double> value) {
  obj_->r_set_heights(value);
}

// [[Rcpp::export]]
std::vector<plant::Individual<plant::K93_Strategy,plant::K93_Environment> > StochasticSpecies___K93__K93_Env__individuals__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_individuals();
}

// [[Rcpp::export]]
std::vector<bool> StochasticSpecies___K93__K93_Env__is_alive__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_is_alive();
}

// [[Rcpp::export]]
std::vector<double> StochasticSpecies___K93__K93_Env__net_reproduction_ratio_by_node__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->net_reproduction_ratio_by_node();
}

// [[Rcpp::export]]
size_t StochasticSpecies___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}
// [[Rcpp::export]]
void StochasticSpecies___K93__K93_Env__ode_state__set(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type value) {
  plant::ode::r_set_ode_state(*obj_, value);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticSpecies___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> StochasticPatch___FF16__FF16_Env__ctor(plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
double StochasticPatch___FF16__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
bool StochasticPatch___FF16__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__introduce_new_node_and_update(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node_and_update(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___FF16__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___FF16__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___FF16__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> StochasticPatch___FF16__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment StochasticPatch___FF16__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::FF16_Strategy,plant::FF16_Environment> > StochasticPatch___FF16__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> StochasticPatch___FF16w__FF16_Env__ctor(plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
double StochasticPatch___FF16w__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
bool StochasticPatch___FF16w__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__introduce_new_node_and_update(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node_and_update(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16w__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___FF16w__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___FF16w__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___FF16w__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16w__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16w__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> StochasticPatch___FF16w__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment StochasticPatch___FF16w__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::FF16w_Strategy,plant::FF16_Environment> > StochasticPatch___FF16w__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16w__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16w__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16w__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16w__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> StochasticPatch___FF16r__FF16_Env__ctor(plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
double StochasticPatch___FF16r__FF16_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
bool StochasticPatch___FF16r__FF16_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__introduce_new_node_and_update(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node_and_update(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__compute_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__FF16_Env__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___FF16r__FF16_Env__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___FF16r__FF16_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___FF16r__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16r__FF16_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16r__FF16_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> StochasticPatch___FF16r__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::FF16_Environment StochasticPatch___FF16r__FF16_Env__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::FF16r_Strategy,plant::FF16_Environment> > StochasticPatch___FF16r__FF16_Env__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___FF16r__FF16_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___FF16r__FF16_Env__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__FF16_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___FF16r__FF16_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> StochasticPatch___K93__K93_Env__ctor(plant::Parameters<plant::K93_Strategy,plant::K93_Environment> parameters, plant::K93_Environment environment, plant::Control control) {
  return plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
double StochasticPatch___K93__K93_Env__compute_competition(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, double height) {
  return obj_->compute_competition(height);
}
// [[Rcpp::export]]
bool StochasticPatch___K93__K93_Env__introduce_new_node(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index species_index) {
  return obj_->r_introduce_new_node(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__introduce_new_node_and_update(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::util::index species_index) {
  obj_->r_introduce_new_node_and_update(species_index);
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__compute_environment(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->r_compute_environment();
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__compute_rates(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->r_compute_rates();
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__set_ode_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::ode::state_type values, double time) {
  plant::ode::r_set_ode_state(*obj_, values, time);
}
// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___K93__K93_Env__derivs(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, const plant::ode::state_type& y, double time) {
  return plant::ode::r_derivs(*obj_, y, time);
}
// [[Rcpp::export]]
void StochasticPatch___K93__K93_Env__set_state(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_, double time, const std::vector<double>& state, const std::vector<size_t>& n) {
  obj_->r_set_state(time, state, n);
}
// [[Rcpp::export]]
std::vector<size_t> StochasticPatch___K93__K93_Env__deaths(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->deaths();
}
// [[Rcpp::export]]
double StochasticPatch___K93__K93_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
size_t StochasticPatch___K93__K93_Env__size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->size();
}

// [[Rcpp::export]]
double StochasticPatch___K93__K93_Env__height_max__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->height_max();
}

// [[Rcpp::export]]
plant::Parameters<plant::K93_Strategy,plant::K93_Environment> StochasticPatch___K93__K93_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::K93_Environment StochasticPatch___K93__K93_Env__environment__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_environment();
}

// [[Rcpp::export]]
std::vector<plant::StochasticSpecies<plant::K93_Strategy,plant::K93_Environment> > StochasticPatch___K93__K93_Env__species__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_species();
}

// [[Rcpp::export]]
size_t StochasticPatch___K93__K93_Env__ode_size__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
double StochasticPatch___K93__K93_Env__ode_time__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_time(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___K93__K93_Env__ode_state__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_state(*obj_);
}

// [[Rcpp::export]]
plant::ode::state_type StochasticPatch___K93__K93_Env__ode_rates__get(plant::RcppR6::RcppR6<plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::ode::r_ode_rates(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16__FF16_Env__ctor(plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__FF16_Env__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___FF16__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__FF16_Env__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___FF16__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___FF16__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule StochasticPatchRunner___FF16__FF16_Env__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16__FF16_Env__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___FF16__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16w__FF16_Env__ctor(plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16w__FF16_Env__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___FF16w__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16w__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16w__FF16_Env__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___FF16w__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___FF16w__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16w_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16w__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16w_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16w__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule StochasticPatchRunner___FF16w__FF16_Env__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16w__FF16_Env__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___FF16w__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16w_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16r__FF16_Env__ctor(plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> parameters, plant::FF16_Environment environment, plant::Control control) {
  return plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__FF16_Env__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___FF16r__FF16_Env__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__FF16_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__FF16_Env__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___FF16r__FF16_Env__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___FF16r__FF16_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::FF16r_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16r__FF16_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::FF16r_Strategy,plant::FF16_Environment> StochasticPatchRunner___FF16r__FF16_Env__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule StochasticPatchRunner___FF16r__FF16_Env__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___FF16r__FF16_Env__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___FF16r__FF16_Env__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::FF16r_Strategy,plant::FF16_Environment> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> StochasticPatchRunner___K93__K93_Env__ctor(plant::Parameters<plant::K93_Strategy,plant::K93_Environment> parameters, plant::K93_Environment environment, plant::Control control) {
  return plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment>(parameters, environment, control);
}
// [[Rcpp::export]]
void StochasticPatchRunner___K93__K93_Env__run(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->run();
}
// [[Rcpp::export]]
plant::util::index StochasticPatchRunner___K93__K93_Env__run_next(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_run_next();
}
// [[Rcpp::export]]
void StochasticPatchRunner___K93__K93_Env__reset(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  obj_->reset();
}
// [[Rcpp::export]]
void StochasticPatchRunner___K93__K93_Env__set_schedule_times(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_, std::vector<std::vector<double> > times) {
  obj_->r_set_schedule_times(times);
}
// [[Rcpp::export]]
bool StochasticPatchRunner___K93__K93_Env__complete__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->complete();
}

// [[Rcpp::export]]
double StochasticPatchRunner___K93__K93_Env__time__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->time();
}

// [[Rcpp::export]]
plant::Parameters<plant::K93_Strategy,plant::K93_Environment> StochasticPatchRunner___K93__K93_Env__parameters__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_parameters();
}

// [[Rcpp::export]]
plant::StochasticPatch<plant::K93_Strategy,plant::K93_Environment> StochasticPatchRunner___K93__K93_Env__patch__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_patch();
}

// [[Rcpp::export]]
plant::NodeSchedule StochasticPatchRunner___K93__K93_Env__schedule__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return obj_->r_schedule();
}
// [[Rcpp::export]]
void StochasticPatchRunner___K93__K93_Env__schedule__set(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_, plant::NodeSchedule value) {
  obj_->r_set_schedule(value);
}

// [[Rcpp::export]]
Rcpp::List StochasticPatchRunner___K93__K93_Env__state__get(plant::RcppR6::RcppR6<plant::StochasticPatchRunner<plant::K93_Strategy,plant::K93_Environment> > obj_) {
  return plant::get_state(*obj_);
}


// [[Rcpp::export]]
plant::Canopy Canopy__ctor(double tol, double nbase, double max_depth) {
  return plant::Canopy(tol, nbase, max_depth);
}
// [[Rcpp::export]]
double Canopy__canopy_openness(plant::RcppR6::RcppR6<plant::Canopy> obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
void Canopy__clear(plant::RcppR6::RcppR6<plant::Canopy> obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
plant::interpolator::Interpolator Canopy__canopy_interpolator__get(plant::RcppR6::RcppR6<plant::Canopy> obj_) {
  return obj_->canopy_interpolator;
}
// [[Rcpp::export]]
void Canopy__canopy_interpolator__set(plant::RcppR6::RcppR6<plant::Canopy> obj_, plant::interpolator::Interpolator value) {
  obj_->canopy_interpolator = value;
}


// [[Rcpp::export]]
plant::Disturbance_Regime Disturbance_Regime__ctor() {
  return plant::Disturbance_Regime();
}
// [[Rcpp::export]]
std::vector<double> Disturbance_Regime__density(plant::RcppR6::RcppR6<plant::Disturbance_Regime> obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Disturbance_Regime__pr_survival(plant::RcppR6::RcppR6<plant::Disturbance_Regime> obj_, double time) {
  return obj_->pr_survival(time);
}

// [[Rcpp::export]]
plant::No_Disturbance No_Disturbance__ctor() {
  return plant::No_Disturbance();
}
// [[Rcpp::export]]
std::vector<double> No_Disturbance__density(plant::RcppR6::RcppR6<plant::No_Disturbance> obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double No_Disturbance__pr_survival(plant::RcppR6::RcppR6<plant::No_Disturbance> obj_, double time) {
  return obj_->pr_survival(time);
}

// [[Rcpp::export]]
plant::Weibull_Disturbance_Regime Weibull_Disturbance_Regime__ctor(double max_patch_lifetime) {
  return plant::Weibull_Disturbance_Regime(max_patch_lifetime);
}
// [[Rcpp::export]]
std::vector<double> Weibull_Disturbance_Regime__density(plant::RcppR6::RcppR6<plant::Weibull_Disturbance_Regime> obj_, std::vector<double> time) {
  return obj_->r_density(time);
}
// [[Rcpp::export]]
double Weibull_Disturbance_Regime__pr_survival(plant::RcppR6::RcppR6<plant::Weibull_Disturbance_Regime> obj_, double time) {
  return obj_->pr_survival(time);
}
// [[Rcpp::export]]
double Weibull_Disturbance_Regime__mean_interval(plant::RcppR6::RcppR6<plant::Weibull_Disturbance_Regime> obj_) {
  return obj_->r_mean_interval();
}
// [[Rcpp::export]]
double Weibull_Disturbance_Regime__cdf(plant::RcppR6::RcppR6<plant::Weibull_Disturbance_Regime> obj_, double time) {
  return obj_->cdf(time);
}
// [[Rcpp::export]]
double Weibull_Disturbance_Regime__icdf(plant::RcppR6::RcppR6<plant::Weibull_Disturbance_Regime> obj_, double prob) {
  return obj_->icdf(prob);
}

// [[Rcpp::export]]
SEXP FF16_Strategy__ctor() {
  return Rcpp::wrap(plant::FF16_Strategy());
}


// [[Rcpp::export]]
plant::FF16_Environment FF16_Environment__ctor(bool canopy_rescale_usually, int soil_number_of_depths) {
  return plant::FF16_Environment(canopy_rescale_usually, soil_number_of_depths);
}
// [[Rcpp::export]]
double FF16_Environment__canopy_openness(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
double FF16_Environment__calc_n_psi(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->calc_n_psi();
}
// [[Rcpp::export]]
double FF16_Environment__calc_a_psi(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->calc_a_psi();
}
// [[Rcpp::export]]
double FF16_Environment__calc_psi(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, double theta_) {
  return obj_->calc_psi(theta_);
}
// [[Rcpp::export]]
void FF16_Environment__clear(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void FF16_Environment__set_fixed_environment(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, double value, double height_max) {
  obj_->set_fixed_environment(value, height_max);
}
// [[Rcpp::export]]
std::vector<double> FF16_Environment__get_soil_water_state(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->get_soil_water_state();
}
// [[Rcpp::export]]
void FF16_Environment__set_soil_water_state(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, std::vector<double> state) {
  obj_->set_soil_water_state(state);
}
// [[Rcpp::export]]
void FF16_Environment__compute_rates(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, std::vector<double> resource_depletion) {
  obj_->compute_rates(resource_depletion);
}
// [[Rcpp::export]]
double FF16_Environment__time__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->time;
}
// [[Rcpp::export]]
void FF16_Environment__time__set(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, double value) {
  obj_->time = value;
}

// [[Rcpp::export]]
size_t FF16_Environment__ode_size__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
size_t FF16_Environment__soil_number_of_depths__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->ode_size();
}

// [[Rcpp::export]]
plant::Canopy FF16_Environment__canopy__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->canopy;
}
// [[Rcpp::export]]
void FF16_Environment__canopy__set(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, plant::Canopy value) {
  obj_->canopy = value;
}

// [[Rcpp::export]]
plant::Internals FF16_Environment__soil__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->r_internals();
}

// [[Rcpp::export]]
plant::ExtrinsicDrivers FF16_Environment__extrinsic_drivers__get(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_) {
  return obj_->extrinsic_drivers;
}
// [[Rcpp::export]]
void FF16_Environment__extrinsic_drivers__set(plant::RcppR6::RcppR6<plant::FF16_Environment> obj_, plant::ExtrinsicDrivers value) {
  obj_->extrinsic_drivers = value;
}


// [[Rcpp::export]]
SEXP FF16r_Strategy__ctor() {
  return Rcpp::wrap(plant::FF16r_Strategy());
}


// [[Rcpp::export]]
SEXP K93_Strategy__ctor() {
  return Rcpp::wrap(plant::K93_Strategy());
}


// [[Rcpp::export]]
plant::K93_Environment K93_Environment__ctor() {
  return plant::K93_Environment();
}
// [[Rcpp::export]]
double K93_Environment__canopy_openness(plant::RcppR6::RcppR6<plant::K93_Environment> obj_, double height) {
  return obj_->canopy_openness(height);
}
// [[Rcpp::export]]
void K93_Environment__clear(plant::RcppR6::RcppR6<plant::K93_Environment> obj_) {
  obj_->clear();
}
// [[Rcpp::export]]
void K93_Environment__set_fixed_environment(plant::RcppR6::RcppR6<plant::K93_Environment> obj_, double value, double height_max) {
  obj_->set_fixed_environment(value, height_max);
}
// [[Rcpp::export]]
double K93_Environment__time__get(plant::RcppR6::RcppR6<plant::K93_Environment> obj_) {
  return obj_->time;
}
// [[Rcpp::export]]
void K93_Environment__time__set(plant::RcppR6::RcppR6<plant::K93_Environment> obj_, double value) {
  obj_->time = value;
}

// [[Rcpp::export]]
plant::Canopy K93_Environment__canopy__get(plant::RcppR6::RcppR6<plant::K93_Environment> obj_) {
  return obj_->canopy;
}
// [[Rcpp::export]]
void K93_Environment__canopy__set(plant::RcppR6::RcppR6<plant::K93_Environment> obj_, plant::Canopy value) {
  obj_->canopy = value;
}

// [[Rcpp::export]]
size_t K93_Environment__ode_size__get(plant::RcppR6::RcppR6<plant::K93_Environment> obj_) {
  return obj_->ode_size();
}


// [[Rcpp::export]]
SEXP FF16w_Strategy__ctor() {
  return Rcpp::wrap(plant::FF16w_Strategy());
}


// [[Rcpp::export]]
plant::ExtrinsicDrivers ExtrinsicDrivers__ctor() {
  return plant::ExtrinsicDrivers();
}
// [[Rcpp::export]]
double ExtrinsicDrivers__evaluate(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_, std::string driver_name, double u) {
  return obj_->evaluate(driver_name, u);
}
// [[Rcpp::export]]
std::vector<double> ExtrinsicDrivers__evaluate_range(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_, std::string driver_name, std::vector<double> u) {
  return obj_->evaluate_range(driver_name, u);
}
// [[Rcpp::export]]
std::vector<std::string> ExtrinsicDrivers__get_names(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_) {
  return obj_->get_names();
}
// [[Rcpp::export]]
void ExtrinsicDrivers__set_constant(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_, std::string driver_name, double k) {
  obj_->set_constant(driver_name, k);
}
// [[Rcpp::export]]
void ExtrinsicDrivers__set_variable(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_, std::string driver_name, std::vector<double> x, std::vector<double> y) {
  obj_->set_variable(driver_name, x, y);
}
// [[Rcpp::export]]
void ExtrinsicDrivers__set_extrapolate(plant::RcppR6::RcppR6<plant::ExtrinsicDrivers> obj_, std::string driver_name, bool extrapolate) {
  obj_->set_extrapolate(driver_name, extrapolate);
}


